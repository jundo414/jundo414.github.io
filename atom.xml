<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HayStacker</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haystacker.net/"/>
  <updated>2019-06-10T20:30:53.722Z</updated>
  <id>http://haystacker.net/</id>
  
  <author>
    <name>Hayato Otsuka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Keystone トークン機能</title>
    <link href="http://haystacker.net/keystone-token-function/"/>
    <id>http://haystacker.net/keystone-token-function/</id>
    <published>2019-06-10T19:53:53.000Z</published>
    <updated>2019-06-10T20:30:53.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Keystone のトークンは、2つ以上の技術の層で構成される階層構造となっている。<br>ペイロードは、いくつかのトランスポート形式でラップされており、一意性、ID、および認証コンテキストなどの属性を提供する。<br>トランスポートフォーマットでは、伝送と検証に必要なパッケージを提供する。</p><p>Keystone で使用可能な認証ドライバとして、UUID、PKI、PKIZ、Fernet がある。（2018年11月20日 時点）。<br>それぞれのメリット・デメリットについて以下に示す。</p><table><thead><tr><th style="text-align:left">Keystone 認証ドライバ</th><th style="text-align:left">メリット</th><th style="text-align:left">デメリット</th><th style="text-align:left">備考</th></tr></thead><tbody><tr><td style="text-align:left">UUID</td><td style="text-align:left">- シンプルで最小のトークン形式<br>シンプルな OpenStack の環境をつくる場合には良い</td><td style="text-align:left">- 永続的にトークンを保持する必要がある<br>- トークンテーブルが大きくなるとパフォーマンスに影響が出る<br>- トークン検証にはメタデータを保持した keystone 等の認証サービスへの接続が必須<br>- マルチ OpenStack 環境には不向き</td><td style="text-align:left">Newton 以降、Keystone のデフォルトのトークンドライバが “UUID” から “fernet” に変更となる<br>- Rocky で削除予定</td></tr><tr><td style="text-align:left">PKI</td><td style="text-align:left">トークン検証として keystone への問い合わせは不要</td><td style="text-align:left">標準的な HTTP ヘッダーサイズより大きい<br>- 複雑な設定<br>- マルチ OpenStack 環境への適用は不可</td><td style="text-align:left">Ocata 以降、非推奨となる</td></tr><tr><td style="text-align:left">PKIZ</td><td style="text-align:left">トークン検証として keystone への問い合わせは不要<br>- 圧縮により PKI のトークンサイズよりは小さくなる</td><td style="text-align:left">標準的な HTTP ヘッダーサイズより大きい<br>- 複雑な設定<br>- マルチ OpenStack 環境への適用は不可</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Fernet</td><td style="text-align:left">永続的にトークンを保持しないため、定期的にトークンを削除する cron ジョブは不要<br>- トークンサイズサイズが小さい<br>- マルチ DC 環境に最適</td><td style="text-align:left">失効イベント数に比例してトークン検証のレスポンス時間が増加</td><td style="text-align:left">Ocata 以降、デフォルトで使用される</td></tr></tbody></table><h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><p><strong>ペイロード</strong>: UUID4</p><p>Keystone がサポートする最もシンプルなトークン形式で、UUID トークンのデータは、一意のランダムに生成された <a href="https://docs.python.org/2/library/uuid.html#uuid.uuid4" target="_blank" rel="noopener">UUID4</a> 値のみで構成される。</p><pre><code>In [1]: import uuidIn [2]: payload = uuid.uuid4()In [3]: payloadOut[3]: UUID(&apos;0b1e0002-31c8-482a-837f-e2842b2c3d92&apos;)In [4]: print(payload)0b1e0002-31c8-482a-837f-e2842b2c3d92</code></pre><p><strong>書式</strong>: 16進数</p><p>これらのトークンは、その16進表記でパッケージ化される。</p><pre><code>In [5]: token = payload.hexIn [6]: tokenOut[6]: &apos;0b1e000231c8482a837fe2842b2c3d92&apos;In [7]: len(token)Out[7]: 32</code></pre><p>トークンは、<code>0b1e000231c8482a837fe2842b2c3d92</code> といった形式となる。<br>トークン自体に ID や認証コンテキストは含まないため、オンラインで Keystone を使用した検証を行う必要がある。<br>Pyystoneでは、発行された UUID トークンを ID および認証コンテキストとマッピングを行う。</p><h2 id="トークン生成フロー"><a href="#トークン生成フロー" class="headerlink" title="トークン生成フロー"></a>トークン生成フロー</h2><p>TBD.</p><h2 id="トークン検証フロー"><a href="#トークン検証フロー" class="headerlink" title="トークン検証フロー"></a>トークン検証フロー</h2><p><img src="/keystone-token-function//uuid-token-validation.png" width="100%"></p><h2 id="トークン失効フロー"><a href="#トークン失効フロー" class="headerlink" title="トークン失効フロー"></a>トークン失効フロー</h2><p><img src="/keystone-token-function//uuid-token-validation.png" width="100%"></p><h1 id="PKI-PKIZ"><a href="#PKI-PKIZ" class="headerlink" title="PKI/PKIZ"></a>PKI/PKIZ</h1><p>PKIトークンには、ユーザのカタログ情報が含まれており、クラウドの規模に比例して大きくなる可能性がある。<br>PKI と PKIZトークンはほぼ同じだが、PKIZ トークンは圧縮を行う点が大きく異なる。</p><p><strong>ペイロード</strong>: JSON</p><p>PKI/PKIZ トークンは、トークンのペイロードとして、オンラインでのトークン検証結果として生成される JSON 形式のデータが使用される。</p><pre><code>{    &quot;token&quot;: {        &quot;audit_ids&quot;: [            &quot;YyobSaHcTNCu7seusdTtpQ&quot;        ],        &quot;catalog&quot;: [            {                &quot;endpoints&quot;: [                    {                        &quot;id&quot;: &quot;9a29eaf20f7942b6b9c96cfb0aa02a3e&quot;,                        &quot;interface&quot;: &quot;admin&quot;,                        &quot;region&quot;: null,                        &quot;region_id&quot;: null,                        &quot;url&quot;: &quot;http://104.239.163.215:35357/v3&quot;                    },                    {                        &quot;id&quot;: &quot;d3233afd2b6041d4a39f8ac1233757fd&quot;,                        &quot;interface&quot;: &quot;public&quot;,                        &quot;region&quot;: null,                        &quot;region_id&quot;: null,                        &quot;url&quot;: &quot;http://104.239.163.215:35357/v3&quot;                    }                ],                &quot;id&quot;: &quot;1b796e214f8140118108a7e4e4ca6e16&quot;,                &quot;name&quot;: &quot;Keystone&quot;,                &quot;type&quot;: &quot;identity&quot;            }        ],        &quot;expires_at&quot;: &quot;2015-02-26T05:48:26.094098Z&quot;,        &quot;extras&quot;: {},        &quot;issued_at&quot;: &quot;2015-02-26T05:33:26.094127Z&quot;,        &quot;methods&quot;: [            &quot;password&quot;        ],        &quot;project&quot;: {            &quot;domain&quot;: {                &quot;id&quot;: &quot;default&quot;,                &quot;name&quot;: &quot;Default&quot;            },            &quot;id&quot;: &quot;59002ce739f143bb8b2cc33caf98fcf9&quot;,            &quot;name&quot;: &quot;admin&quot;        },        &quot;roles&quot;: [            {                &quot;id&quot;: &quot;360b177d8c2347ff95e0ac1615ba8fb6&quot;,                &quot;name&quot;: &quot;admin&quot;            }        ],        &quot;user&quot;: {            &quot;domain&quot;: {                &quot;id&quot;: &quot;default&quot;,                &quot;name&quot;: &quot;Default&quot;            },            &quot;id&quot;: &quot;85a9af145ddb4d19a9544dfbeac5d1f0&quot;,            &quot;name&quot;: &quot;admin&quot;        }    }}</code></pre><p><strong>書式</strong>: CMS + [zlib] + base64</p><p>JSON ペイロードは、最初に非対称キーを使用して署名され、<a href="http://en.wikipedia.org/wiki/Cryptographic_Message_Syntax" target="_blank" rel="noopener">暗号メッセージ構文で</a>ラップされる。</p><p>PKIZ トークンの場合、署名されたペイロードは <a href="http://www.zlib.net/" target="_blank" rel="noopener">zlib</a> を使用して圧縮され、その後、PKI トークンは base64でエンコードされ、次に任意の置換方式を使用して URL セーフにされる。<br>代わりに、PDKZ トークンは、<a href="https://docs.python.org/2/library/base64.html#base64.urlsafe_b64encode" target="_blank" rel="noopener">従来の置換スキーム</a>を使用して base64-URL エンコードされる。</p><p>最後に、PKI トークンには固定プレフィックスがありませんが、PKIZ トークンには明示的に PKIZ_ <code></code>というプレフィックスが付く。<br>最小の PKI トークンは以下のようになる。</p><pre><code>MIIE-gYJKoZIhvcNAQcCoIIE7zCCBOsCAQExDTALBglghkgBZQMEAgEwggNMBgkqhkiG9w0BBwGgggM9BIIDOXsidG9rZW4iOnsibWV0aG9kcyI6WyJwYXNzd29yZCJdLCJyb2xlcyI6W3siaWQiOiIzNjBiMTc3ZDhjMjM0N2ZmOTVlMGFjMTYxNWJhOGZiNiIsIm5hbWUiOiJhZG1pbiJ9XSwiZXhwaXJlc19hdCI6IjIwMTUtMDItMjZUMDU6NDg6MjYuMDk0MDk4WiIsInByb2plY3QiOnsiZG9tYWluIjp7ImlkIjoiZGVmYXVsdCIsIm5hbWUiOiJEZWZhdWx0In0sImlkIjoiNTkwMDJjZTczOWYxNDNiYjhiMmNjMzNjYWY5OGZjZjkiLCJuYW1lIjoiYWRtaW4ifSwiY2F0YWxvZyI6W3siZW5kcG9pbnRzIjpbeyJyZWdpb25faWQiOm51bGwsInVybCI6Imh0dHA6Ly8xMDQuMjM5LjE2My4yMTU6MzUzNTcvdjMiLCJyZWdpb24iOm51bGwsImludGVyZmFjZSI6ImFkbWluIiwiaWQiOiI5YTI5ZWFmMjBmNzk0MmI2YjljOTZjZmIwYWEwMmEzZSJ9LHsicmVnaW9uX2lkIjpudWxsLCJ1cmwiOiJodHRwOi8vMTA0LjIzOS4xNjMuMjE1OjM1MzU3L3YzIiwicmVnaW9uIjpudWxsLCJpbnRlcmZhY2UiOiJwdWJsaWMiLCJpZCI6ImQzMjMzYWZkMmI2MDQxZDRhMzlmOGFjMTIzMzc1N2ZkIn1dLCJ0eXBlIjoiaWRlbnRpdHkiLCJpZCI6IjFiNzk2ZTIxNGY4MTQwMTE4MTA4YTdlNGU0Y2E2ZTE2IiwibmFtZSI6IktleXN0b25lIn1dLCJleHRyYXMiOnt9LCJ1c2VyIjp7ImRvbWFpbiI6eyJpZCI6ImRlZmF1bHQiLCJuYW1lIjoiRGVmYXVsdCJ9LCJpZCI6Ijg1YTlhZjE0NWRkYjRkMTlhOTU0NGRmYmVhYzVkMWYwIiwibmFtZSI6ImFkbWluIn0sImF1ZGl0X2lkcyI6WyJZeW9iU2FIY1ROQ3U3c2V1c2RUdHBRIl0sImlzc3VlZF9hdCI6IjIwMTUtMDItMjZUMDU6MzM6MjYuMDk0MTI3WiJ9fTGCAYUwggGBAgEBMFwwVzELMAkGA1UEBhMCVVMxDjAMBgNVBAgMBVVuc2V0MQ4wDAYDVQQHDAVVbnNldDEOMAwGA1UECgwFVW5zZXQxGDAWBgNVBAMMD3d3dy5leGFtcGxlLmNvbQIBATALBglghkgBZQMEAgEwDQYJKoZIhvcNAQEBBQAEggEAYJR+ETbjA4RpgToeRm0qh-zxRWyBL4RdN99hLHV6foIpcr6uXMN-DaUJvGygPDi1wi-HAbpErJAe9iRHk4+8BUnX--jQRTaYhkg237eyjpYHU8Hgt8Ydn7Wdnn0hriXKt+RZBG-ZEnnP-MZ9V9GGJz-BoAMHx42uF5j6mlfVvUxtJGSaZ2wPROkLIHAjrX-8zEo8YhtGQHi-rFvXOoP+w8TVb907R2WNsGs3LbFKRmDv-yev6pMnz+gQu8uImf2idd18hyEYdw8M9bgZc2YsGBiPSeIm-VhzH9qTX0e7fK-chhAE+saIEbl5Mw0PzybhTyKHRzqtsW4HWFOlbE0yOA==</code></pre><p>今回のケースでは 1,712 バイトとなっている。<br>一方、最小の PKIZ トークンは次のようになる。</p><pre><code>PKIZ_eJxtVcmSozgUvPMVc6_oKMBgm0Mf2IzBCIpVlm4sNiAEtssLy9eP7K6Jqo4YboCUysyX7-nXL_ZopmV7_-gger784oBtm-8VcnYnbNePwlODQj-xb6tZ1zX_qquBORqx6moVreq20nAATLUyh6rygFa1F65uG0sZeE0brKqqgKLZtuHvr01pKZ8YSo3fX5scpnxmKW0x2Us4OQPae3MpKhPWnZJzdWfKxZG-fi6uTQaDxm9s2TPAgEgwe10i-9DkPWLOfkwpIJWMYq32LId4c7LgfN2-2p1c5zBhG50aW8I5bxxlHw0N3tdDtndoISh1qdtLm9gDiJMbMOwbIDgBBlpyIEZLQII7mNuJnTrDhgH2GmN1pmgRvCRgS7khSO82Oa_sjrY2ObFvaYf26ZUr_2ZgYojrEo683fPX78WmhOaw82MgITHtPCvhgWjzvpW2HLBwh4nX-kYgYENtmCd3BAX63IhgeMuYkUcmB4kbHsHxgb-8wlBuC0s5c3kfzoxafpicCcPynIvy8WVkJwu5NTA56ZQ_9Xc1X27VpTutR2AwyQTILjFFDkzSxIxZgjmZvbh4lAQ8WXyBSd9AHb2XVjrhbkNw9ATctDnzhbOb4at0Tu2RkIC4HX3DHDFBPIYhRXG1AHNKEUEy6hAPIJhw5Cju9toUXdpzGVTue_Fp1vnOzLuy04WiG56Ap3IbDn6zfoBY5V1iz34kjR4BjL4p-AQI4JkDd4HmJ4sn2hPsB9CZ-UOLDtdIfFVoKKFzzeBL4hm_fAELDhgVQy07TwwpjkMmg9a-0cqsTIJnPdPXDqBDC7sXSraRP-y1V4UyJo8dcObKbfuNSBIex7YErISFqlpgI-CxUdYotmcQOy0mxeiJKYuwR5-s825z416Otjd62Hs8KyH9OoketuGE9oAl8aa8fBHT6U8Sw0cONyzu9pKV_sz90cLodxsh3wZ_BSn8imupO8o3S6_GsSkxhjyaW55jNAVECtm37AUmlQQgK6eFJCAC-T-aP-v-J-IbAVuUf1aP--rxNklGMekrIRM290g8NxnFt6yjJOmd3qavvpiLRUrx5u_O5H62JjDMH52JJMja-hhbuooSNoEsjU0iDWyGIZ1NF6itpQqJyWk10NMUjAZR2YjyUrYKaGl6Z6bxIJAGQ0VGGgRbQ03TvPdoaZg-UIfXZr0aNlwK5Rnvg9EyVPgHAABjUS7KSaYHa3MrrJG6nffIA1tT_2c2ckbwc6CamhaoZlWZ6s5fHiM7FSN_F4LPwIZ62eK-Ck7bCCpG5gpWk55VZuJb-wZ30-Uwfh6c4_0Srgp12Ak0si9usTwdmuUcuHlIuqUjXarRXcN-_THIn6tdAN-nPSg57PGwD4Wt2Avm6qpmghnW1w0ZrGUX7cQ3MprKmr7nWFmkufamysNiZfWSqNPDabMl54Q7ykPw2Gzxx1G8gzcNvGvRvTCjTLAqtQ1dZ7xM-zxbbam8Vha3SgGNhxL8-bESItc8SiF3PhHSXD4Mfztp16N2Em_F8CYqviBlaj917zPUwf2h-1nsiVSIpWGKeu-Gdtc6rtfD2eRWEbn5VNhNU-wivHb8i14U1yo6RNH7qf0Y4ValpVTG9nR4NMHv39zrQjM94_ty-xc2_Erg</code></pre><p>PKI と比較して、1,637 バイトと若干小さくなっている。<br>今回の場合、トークンには最小限のカタログ情報だけがエンコードされているが、カタログ情報の大きい PKIZ トークンでは、PKI と比較して圧縮率がはるかに高くなる。</p><h2 id="トークン生成フロー-1"><a href="#トークン生成フロー-1" class="headerlink" title="トークン生成フロー"></a>トークン生成フロー</h2><p>TBD.</p><h2 id="トークン検証フロー-1"><a href="#トークン検証フロー-1" class="headerlink" title="トークン検証フロー"></a>トークン検証フロー</h2><p><img src="/keystone-token-function//pki-token-validation.png" width="100%"></p><h2 id="トークン失効フロー-1"><a href="#トークン失効フロー-1" class="headerlink" title="トークン失効フロー"></a>トークン失効フロー</h2><p><img src="/keystone-token-function//pki-token-validation.png" width="100%"></p><h1 id="Fernet"><a href="#Fernet" class="headerlink" title="Fernet"></a>Fernet</h1><p>Fernet トークンはトークン内にアカウント情報（ユーザID、プロジェクトID）や有効期限を保持し、共通鍵で暗号化して格納している。<br>そのため Keystone のデータベース問い合わせすることなくトークンの検証が可能となっており、データベース負荷を大幅に低減することが可能となる。</p><p>Fornet トークンでは、memcached の使用が推奨されている。<br>トークンを定期的に削除する cron ジョブは不要となる。<br>Newton 以降、Keystone のデフォルトのトークンドライバが “UUID” から “fernet” に変更となる。</p><p><strong>ペイロード: Fernet トークン</strong></p><p>Fernet トークンは、最小の識別情報と動的な認証コンテキストを優先する非常に軽いトークン。</p><p><strong>書式: Fernet</strong></p><p>Keystone の Fernet トークン形式は、暗号化認証の機構である Fernet がベースとなっている。<br>Fernet は、もともと Heroku が API トークンで使用するために作成された安全なメッセージング形式で、共通鍵暗号化を実装したもの。</p><p>共通鍵暗号とは、暗号用と復号用に同じ鍵を用いる方式で、ファイル暗号などによく使われ、処理が早いのが特徴。 共通鍵暗号では、暗号化されたデータを復号化する前に鍵を渡す必要がある。</p><p>Fernet 認証方式では、共通鍵の一覧を取得し、一覧内にある最初の鍵を使用してすべての暗号化を実行し、その一覧からすべての鍵を使用して復号化を試みるといった複数の鍵にも対応している。</p><p>Fernet 鍵は base64 エンコーディング（base64.urlsafe_b64encode）で、次の項目の組み合わせで構成されている。</p><table><thead><tr><th style="text-align:left">項目</th><th style="text-align:left">データ長</th><th style="text-align:left">値</th><th style="text-align:left">備考</th></tr></thead><tbody><tr><td style="text-align:left">Fernet 形式のバージョン番号 (Version)</td><td style="text-align:left">8ビット</td><td style="text-align:left">0x80</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">現在のタイムスタンプ (Timestamp)</td><td style="text-align:left">64ビット</td><td style="text-align:left">int(time.time())</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">初期化ベクトル (IV)</td><td style="text-align:left">128ビット</td><td style="text-align:left">os.urandom(16)</td><td style="text-align:left">- 署名鍵はfernet鍵の最初の16バイト<br>- 暗号化キーは fernet キーの最後の16バイト</td></tr><tr><td style="text-align:left">暗号文 (Ciphertext)</td><td style="text-align:left">可変長（128 ビットの倍数）</td><td style="text-align:left"></td><td style="text-align:left">以下のデータにより構成されている。<br>- <strong>バージョン</strong>:<br>&nbsp;&nbsp;0（スコープなしのペイロード）<br>&nbsp;&nbsp;1（ドメインスコープのペイロード）<br>&nbsp;&nbsp;2（プロジェクトスコープのペイロード）<br>&nbsp;&nbsp;3（トラストスコープのペイロード）<br>- <strong>ユーザID</strong>: バイト形式<br>- <strong>メソッド</strong>: 整数形式<br>- <strong>プロジェクトID</strong>: バイト形式<br>- <strong>有効期限</strong>: タイムスタンプの整数形式<br>- <strong>監査ID</strong>: バイト形式</td></tr><tr><td style="text-align:left">HMAC</td><td style="text-align:left">256 ビット</td><td style="text-align:left"></td></tr></tbody></table><p>Fernet は、トークンの作成時間をトークンから把握することもできる。</p><pre><code>&gt;&gt;&gt; token = b&apos;gAAAAABb93HyEo0JIFZlTfKHlyRFTiJPqlBK75MEt_858fnATWN3mRNomlNQr-ZjHwnmlzcXKKZYpuGSmc8UgMwwEhCvWk5PsCiAxV-GsVDhpYcduZVK6ugtLTVkGgZZiEBC3-77Jkpi8VA2qouzyWzDbBgjMO98YuQkjEH6kPAKApGYrSGnFEw=&apos;&gt;&gt;&gt; &gt;&gt;&gt; import struct, base64, datetime&gt;&gt;&gt; timestamp = struct.unpack(&apos;&gt;Q&apos;, base64.urlsafe_b64decode(token)[1:9])[0]&gt;&gt;&gt; &gt;&gt;&gt; timestamp1542943218&gt;&gt;&gt; datetime.datetime.fromtimestamp(timestamp).strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)&apos;2018-11-23 12:20:18&apos;</code></pre><h2 id="トークン生成フロー-2"><a href="#トークン生成フロー-2" class="headerlink" title="トークン生成フロー"></a>トークン生成フロー</h2><p><img src="/keystone-token-function//fernet-token-publish.png" width="100%"></p><h2 id="Fernet-トークンのバージョン"><a href="#Fernet-トークンのバージョン" class="headerlink" title="Fernet トークンのバージョン"></a>Fernet トークンのバージョン</h2><p>Fernet 形式のバージョン。現在は “0x80” で固定。</p><pre><code>&gt;&gt;&gt; version=b&apos;\x80&apos;</code></pre><h2 id="現在時刻のタイムスタンプ"><a href="#現在時刻のタイムスタンプ" class="headerlink" title="現在時刻のタイムスタンプ"></a>現在時刻のタイムスタンプ</h2><p>現在時刻を取得する。</p><pre><code>&gt;&gt;&gt; import time&gt;&gt;&gt; time.time()1542943218.944182</code></pre><p>現在時刻を int 型へ変換する。</p><pre><code>&gt;&gt;&gt; current_time=int(time.time())&gt;&gt;&gt; current_time1542943218</code></pre><h2 id="IV"><a href="#IV" class="headerlink" title="IV"></a>IV</h2><p>初期化ベクトルを作成する。</p><pre><code>&gt;&gt;&gt; import os&gt;&gt;&gt; iv = os.urandom(16)&gt;&gt;&gt; ivb&apos;\x12\x8d\t VeM\xf2\x87\x97$EN&quot;O\xaa&apos;</code></pre><h2 id="暗号文"><a href="#暗号文" class="headerlink" title="暗号文"></a>暗号文</h2><pre><code>&gt;&gt;&gt; from cryptography.hazmat.primitives import hashes, padding&gt;&gt;&gt; from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes&gt;&gt;&gt; from cryptography.hazmat.backends import default_backend&gt;&gt;&gt; &gt;&gt;&gt; padder = padding.PKCS7(algorithms.AES.block_size).padder()</code></pre><p>padder にブロックサイズ 128 が設定される。</p><pre><code>&gt;&gt;&gt; padder.__dict__{&apos;_buffer&apos;: b&apos;&apos;, &apos;block_size&apos;: 128}</code></pre><p>プロジェクトスコープ付きペイロードを定義する。</p><pre><code>&gt;&gt;&gt; project_scoped_payload = b&apos;\x96\x02\xb0\x134\xf3\xed~\xb2H;\x91\xb8\x19+\xa0C\xb5\x80\x02\xb0B=E\xcd\xde\xc8Ap\xbe6^\x0b1\xa1\xb1_\xcbA\xd5\x87P\x02\xb4C\xd9\x91\xb0}oA\xd3fCu\x95z\\\xbd\xd8{\x89\xbc&apos;</code></pre><p>ブロックサイズに合わせてパディングを適用する。</p><pre><code>&gt;&gt;&gt; padded_data = padder.update(project_scoped_payload) + padder.finalize()&gt;&gt;&gt; padded_datab&apos;\x96\x02\xb0\x134\xf3\xed~\xb2H;\x91\xb8\x19+\xa0C\xb5\x80\x02\xb0B=E\xcd\xde\xc8Ap\xbe6^\x0b1\xa1\xb1_\xcbA\xd5\x87P\x02\xb4C\xd9\x91\xb0}oA\xd3fCu\x95z\\\xbd\xd8{\x89\xbc\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10&apos;</code></pre><p>32バイトのランダム文字列バイナリ形式の fernet 鍵を定義する。</p><pre><code>&gt;&gt;&gt; b_key = os.urandom(32)</code></pre><p>暗号化キーは fernet キーの最後の16バイトとなる。</p><pre><code>&gt;&gt;&gt; backend = default_backend()&gt;&gt;&gt; e_key = b_key[16:]</code></pre><p>CBC モードで ABC 暗号化を行う。</p><pre><code>&gt;&gt;&gt; encryptor = Cipher(algorithms.AES(e_key), modes.CBC(iv), backend).encryptor()</code></pre><p>パディングされた Keystone ペイロードを暗号化する。</p><pre><code>&gt;&gt;&gt; ciphertext = encryptor.update(padded_data) + encryptor.finalize()&gt;&gt;&gt; ciphertextb&apos;PJ\xef\x93\x04\xb7\xff9\xf1\xf9\xc0Mcw\x99\x13h\x9aSP\xaf\xe6c\x1f\t\xe6\x977\x17(\xa6X\xa6\xe1\x92\x99\xcf\x14\x80\xcc0\x12\x10\xafZNO\xb0(\x80\xc5_\x86\xb1P\xe1\xa5\x87\x1d\xb9\x95J\xea\xe8--5d\x1a\x06Y\x88@B\xdf\xee\xfbJb&apos;</code></pre><h2 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h2><p>署名鍵付き 256 ビット SHA256 HMAC。 上記のすべての項目（バージョン、タイムスタンプ、IV、暗号文）を結合したもの。</p><p>署名鍵はfernet鍵の最初の16バイトとなる。</p><pre><code>&gt;&gt;&gt; s_key = b_key[:16]</code></pre><p>HMAC の作成では SHA256 ハッシュを使用する。</p><pre><code>&gt;&gt;&gt; from cryptography.hazmat.primitives.hmac import HMAC&gt;&gt;&gt; h = HMAC(s_key, hashes.SHA256(), backend)</code></pre><p>HMAC は Fernet Version、Timestamp、IV、Ciphertext の組み合わせで構成される。</p><pre><code>&gt;&gt;&gt; import struct&gt;&gt;&gt; &gt;&gt;&gt; basic_parts = (version+ struct.pack(&quot;&gt;Q&quot;, current_time) + iv + ciphertext)&gt;&gt;&gt; basic_partsb&apos;\x80\x00\x00\x00\x00[\xf7q\xf2\x12\x8d\t VeM\xf2\x87\x97$EN&quot;O\xaaPJ\xef\x93\x04\xb7\xff9\xf1\xf9\xc0Mcw\x99\x13h\x9aSP\xaf\xe6c\x1f\t\xe6\x977\x17(\xa6X\xa6\xe1\x92\x99\xcf\x14\x80\xcc0\x12\x10\xafZNO\xb0(\x80\xc5_\x86\xb1P\xe1\xa5\x87\x1d\xb9\x95J\xea\xe8--5d\x1a\x06Y\x88@B\xdf\xee\xfbJb&apos;</code></pre><blockquote><p>“&gt;” はビッグエンディアン、“Q” は符号なし long long 型を表す。</p></blockquote><p>Fernet Version、Timestamp、IV、Ciphertext から HMAC を生成する。</p><pre><code>&gt;&gt;&gt; h.update(basic_parts)&gt;&gt;&gt; hmac = h.finalize()&gt;&gt;&gt; hmacb&apos;\xf1P6\xaa\x8b\xb3\xc9l\xc3l\x18#0\xef|b\xe4$\x8cA\xfa\x90\xf0\n\x02\x91\x98\xad!\xa7\x14L&apos;</code></pre><p>Fernet トークンは、Version、Timestamp、IV、Ciphertext、HMAC の Base64 URL-Safe エンコーディングとなる。</p><pre><code>&gt;&gt;&gt; import base64&gt;&gt;&gt; &gt;&gt;&gt; fernet = base64.urlsafe_b64encode(basic_parts + hmac).decode(&apos;utf-8&apos;)&gt;&gt;&gt; fernet&apos;gAAAAABb93HyEo0JIFZlTfKHlyRFTiJPqlBK75MEt_858fnATWN3mRNomlNQr-ZjHwnmlzcXKKZYpuGSmc8UgMwwEhCvWk5PsCiAxV-GsVDhpYcduZVK6ugtLTVkGgZZiEBC3-77Jkpi8VA2qouzyWzDbBgjMO98YuQkjEH6kPAKApGYrSGnFEw=&apos;</code></pre><h2 id="トークン検証フロー-2"><a href="#トークン検証フロー-2" class="headerlink" title="トークン検証フロー"></a>トークン検証フロー</h2><p><img src="/keystone-token-function//fernet-token-validation.png" width="100%"></p><h2 id="トークン失効フロー-2"><a href="#トークン失効フロー-2" class="headerlink" title="トークン失効フロー"></a>トークン失効フロー</h2><p><img src="/keystone-token-function//fernet-token-validation.png" width="100%"></p><h2 id="Keystone-における-Fernet-トークン設定"><a href="#Keystone-における-Fernet-トークン設定" class="headerlink" title="Keystone における Fernet トークン設定"></a>Keystone における Fernet トークン設定</h2><p>Fernet トークンを使用するには、keystone.conf の [fernet_token] セクション項目、および [token] セクションの provider 項目を設定する。</p><pre><code>[token]provider = keystone.token.providers.fernet.Provider[fernet_tokens]# Fernet 鍵を保存する鍵リポジトリの場所key_repository = /etc/keystone/fernet-keys/# 鍵リポジトリ上の最大の鍵の数（初期値: 3）# - コントローラノードの台数以下を設定する。max_active_keys = 5</code></pre><p>Fernet 鍵は、デフォルトで “/etc/keystone/fernet-keys/” にある鍵リポジトリに保存されている。</p><p>Fernet 鍵ファイルは 0 から始まる integer 形式の名前となる。</p><pre><code>$ ls /etc/keystone/fernet-keys0 1 2 3 4</code></pre><p>以下の 3 つのタイプの鍵ファイルが存在する。</p><ul><li><strong>プライマリ鍵</strong> - プライマリ鍵は、fernet トークンの暗号化および復号化に使用される。最も大きいインデックス名となっているものがプライマリ鍵ファイルとなる。</li><li><strong>セカンダリ鍵</strong> - セカンダリ鍵は、fernet トークンの復号にのみ使用される。 セカンダリ鍵ファイルの名前は、最大のインデックスより小さく、最小のインデックス（0）よりも大きい値となる。</li><li><strong>ステージ鍵</strong> - ステージング鍵は、fernet トークンの復号にのみ使用されるセカンダリ鍵と似ているが、最小のインデックス番号（0）となっているものがステージング鍵となる。</li></ul><p>Fernet 鍵は、以下のフローで遷移する。</p><ul><li>新規作成 → ステージ鍵 → プライマリ鍵 → セカンダリ鍵 → 削除</li></ul><table><thead><tr><th style="text-align:left">Fernet 鍵</th><th style="text-align:left">インデックス番号<br>（max_active_keys=3 の場合）</th><th style="text-align:left">暗号化</th><th style="text-align:left">複合化</th></tr></thead><tbody><tr><td style="text-align:left">プライマリ鍵</td><td style="text-align:left">2</td><td style="text-align:left">○</td><td style="text-align:left">○</td></tr><tr><td style="text-align:left">セカンダリ鍵</td><td style="text-align:left">1</td><td style="text-align:left">-</td><td style="text-align:left">○</td></tr><tr><td style="text-align:left">ステージ鍵</td><td style="text-align:left">0</td><td style="text-align:left">-</td><td style="text-align:left">○</td></tr></tbody></table><p>要約すると、fernet トークンはプライマリ鍵を使用して暗号化され、鍵リポジトリからの fernet キーの一覧を使用して復号化される。</p><h2 id="Fernet-鍵のローテーション手順"><a href="#Fernet-鍵のローテーション手順" class="headerlink" title="Fernet 鍵のローテーション手順"></a>Fernet 鍵のローテーション手順</h2><p><img src="/keystone-token-function//fernet-lotation-process.png" width="100%"></p><p>keystone-manage コマンドを使用し、鍵リポジトリに2つの鍵を新規作成する fernet-setup を行う。</p><p>セカンダリ鍵はなく、プライマリ鍵 1 と、ステージ鍵 0 とで構成される。</p><pre><code>$ keystone-manage fernet_setup2507 INFO keystone.token.providers.fernet.utils [-] [fernet_tokens] key_repository does not appear to exist; attempting to create it2507 INFO keystone.token.providers.fernet.utils [-] Created a new key: /etc/keystone/fernet-keys/02507 INFO keystone.token.providers.fernet.utils [-] Starting key rotation with 1 key files: [&apos;/etc/keystone/fernet-keys/0&apos;]2507 INFO keystone.token.providers.fernet.utils [-] Current primary key is: 02507 INFO keystone.token.providers.fernet.utils [-] Next primary key will be: 12507 INFO keystone.token.providers.fernet.utils [-] Promoted key 0 to be the primary: 12507 INFO keystone.token.providers.fernet.utils [-] Created a new key: /etc/keystone/fernet-keys/02507 INFO keystone.token.providers.fernet.utils [-] Excess keys to purge: []$ ls /etc/keystone/fernet-keys/0  1</code></pre><p>ローテーションの状態を確認しながら、ローテーションを行う。</p><pre><code>$ keystone-manage fernet_rotate2528 INFO keystone.token.providers.fernet.utils [-] Starting key rotation with 2 key files: [&apos;/etc/keystone/fernet-keys/0&apos;, &apos;/etc/keystone/fernet-keys/1&apos;]2528 INFO keystone.token.providers.fernet.utils [-] Current primary key is: 12528 INFO keystone.token.providers.fernet.utils [-] Next primary key will be: 22528 INFO keystone.token.providers.fernet.utils [-] Promoted key 0 to be the primary: 22528 INFO keystone.token.providers.fernet.utils [-] Created a new key: /etc/keystone/fernet-keys/02528 INFO keystone.token.providers.fernet.utils [-] Excess keys to purge: []$ ls /etc/keystone/fernet-keys/0  1  2</code></pre><ul><li>ローテーションした後、2 がプライマリ鍵となり、0 および 1 は復号化で使用される。</li><li>前のプライマリ鍵 1 は、同じ名前のままセカンダリ鍵となる。</li><li>新しいステージ鍵 0 が導入される。</li></ul><p>再度 Fernet 鍵のローテーションを行う。</p><pre><code>$ keystone-manage fernet_rotate2698 INFO keystone.token.providers.fernet.utils [-] Starting key rotation with 3 key files: [&apos;/etc/keystone/fernet-keys/0&apos;, &apos;/etc/keystone/fernet-keys/1&apos;, &apos;/etc/keystone/fernet-keys/2&apos;]2698 INFO keystone.token.providers.fernet.utils [-] Current primary key is: 22698 INFO keystone.token.providers.fernet.utils [-] Next primary key will be: 32698 INFO keystone.token.providers.fernet.utils [-] Promoted key 0 to be the primary: 32698 INFO keystone.token.providers.fernet.utils [-] Created a new key: /etc/keystone/fernet-keys/02698 INFO keystone.token.providers.fernet.utils [-] Excess keys to purge: [1]$ ls /etc/keystone/fernet-keys/0  2  3</code></pre><p>今度は、最大のインデックスは 3 となり、ステージ鍵 0 は、鍵 3 のプライマリ鍵となる。<br>前のプライマリ鍵 2 は、同じファイル名のままセカンダリ鍵となり、前のセカンダリ鍵は、同じファイル名のままセカンダリ鍵として残る。そして、新たにステージ鍵 0 が導入される。<br>max_active_keys を 3 に設定した場合、セカンダリ鍵 1 は今回の鍵のローテーション中に削除される。</p><p>想定通り、プライマリ鍵が 3 となり、鍵 1 が削除されている。</p><p>今回の場合、max_active_keys=3 で設定しているため、有効な鍵は 3 つとなっており、最も小さいインデックスの鍵が削除される。<br>鍵 2 と鍵 3 がプライマリ鍵のときに暗号化されたものは、引き続き検証可能な状態だが、削除済みである鍵 1 で暗号化されたものは検証することができない。<br>鍵のローテーションを頻繁に行ったり、max_active_keys の値が小さすぎたりした場合、有効なトークンが早期に消滅することがあり得るため、注意が必要となる。<br>たとえば、プライマリ鍵を 30 分ごとにローテーションするようにし、Keystone トークンの有効期間を 6 時間に設定している場合、max_active_keys には 12 以上の値を設定する必要がある。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max_active_keys 設定値</span><br><span class="line">&gt;= Keystone トークン有効時間 / ローテーション間隔</span><br><span class="line">= 6 [時間 ] / 30 [分]</span><br><span class="line">= 360 [分] / 30 [分]</span><br><span class="line">= 12</span><br></pre></td></tr></table></figure><h2 id="性能比較"><a href="#性能比較" class="headerlink" title="性能比較"></a>性能比較</h2><p>トークンの作成速度は、PKI/PKIZ が一番遅く、次に UUID が続き、Fernet が一番早い。（2015年6月時点）</p><p>UUID は、Keystone で使用可能な最もシンプルなトークンフォーマットで、ランダムに生成された 32 文字の文字列を使用して Keystone に接続し、トークン検証を行う。<br>この時、Keystone でトークンが有効か無効化かを判断するために、トークンとユーザー ID、認証メタデータのマッピング情報を保持している必要がある。</p><p>PKI トークンは、所有者の ID とトークン認証コンテキストをトークンと共にパックし、CMS を使用してパッケージ全体をラップする。</p><p>PKIZ トークンは、端的に言うと PKI トークンを圧縮を追加したもの。</p><p>近年では、A​​ES-CBC を使用した暗号化、および SHA256 を使用した署名を行う Fernet トークンを使用することができるようになっている。</p><p>Fernet トークンには、所有者 ID や認証コンテキストに関するメタデータも含まれている。</p><p>Keystone で行う処理の内、性能が大きく影響するものとしては、主にトークン作成およびトークン検証が挙げられる。</p><p>その他の処理については、頻繁に行われるものでもなく、性能はさほど問題にはならない。</p><p>Keystone トークンを複数の地域にまたがった同期機能は、機能要求としてあるのが一般的となっている。<br>これは、2 つ以上の地域にそれぞれ Keystone インスタンスを立て、ある地域で生成されたトークンを他の地域で検証し、正常に使用できるようにするといったケースである。</p><p>UUID トークンを使用する場合には、可能な限り迅速にすべての地域にトークンを同期させる必要があり、複雑となる傾向がある。<br>この場合、クライアントからのトークンをすべての場所に複製するまで保留するか、ローカルで作成して非同期で複製するかの 2 つの方法が考えられる。<br>しかし、1つ目の方法では、トークンの作成時に応答時間が長くなり、2つ目の方法では、トークン発行が競合状態になる可能性がある。<br>つまり、どちらの方法を採択するにせよ応答時間の短縮が必須となってくる。</p><p>一方、Fernet トークンは永続化する必要がないため、token テーブルは空となり、すべての地域と同期を取る必要がない。</p><pre><code>&gt; SELECT * FROM `token`;Empty set (0.00 sec)</code></pre><p>世界中に点在するう5つのデータセンター（ワシントンDC、シカゴ [イリノイ州]、ダラス [テキサス州]、香港、シドニー [オーストラリア]）で Fernet 検証結果では、応答時間は1つの地域で行なった場合と変わらないにも関わらず、すべての地域で即座にトークンが使用可能となる。<br>待機時間や同期にかかる時間は一切なく、応答時間には同期レプリケーションのオーバーヘッドが発生しないため、すべての地域でトークンの暗号鍵をすぐに確認することができるようになる。<br>※ 今回、検証ケースを絞るため Fernet トークンは常に255バイト未満で設定。</p><h2 id="Keystone-グローバルネットワークでクラスタ化された-Galera-Cluster-構成"><a href="#Keystone-グローバルネットワークでクラスタ化された-Galera-Cluster-構成" class="headerlink" title="Keystone + グローバルネットワークでクラスタ化された Galera Cluster 構成"></a>Keystone + グローバルネットワークでクラスタ化された Galera Cluster 構成</h2><p>これらのメトリックは、公開されたインターネット上でレプリケーションを実行するグローバルに分散された5台のGalera クラスタノードの場合の検証結果を示している。</p><p><strong>トークン作成の性能</strong></p><table><thead><tr><th style="text-align:left">トークン</th><th style="text-align:left">応答時間</th><th style="text-align:left">リクエスト数/秒</th></tr></thead><tbody><tr><td style="text-align:left">UUID</td><td style="text-align:left">342.4</td><td style="text-align:left">166.9</td></tr><tr><td style="text-align:left">PKI</td><td style="text-align:left">351.4</td><td style="text-align:left">110.2</td></tr><tr><td style="text-align:left">PKIZ</td><td style="text-align:left">339.7</td><td style="text-align:left">120.7</td></tr><tr><td style="text-align:left">Fernet</td><td style="text-align:left">50.8</td><td style="text-align:left">237.1</td></tr></tbody></table><p><strong>トークン検証の性能</strong></p><table><thead><tr><th style="text-align:left">トークン</th><th style="text-align:left">応答時間</th><th style="text-align:left">リクエスト数/秒</th></tr></thead><tbody><tr><td style="text-align:left">UUID</td><td style="text-align:left">6.02</td><td style="text-align:left">1715.7</td></tr><tr><td style="text-align:left">PKI</td><td style="text-align:left">6.25</td><td style="text-align:left">1717.2</td></tr><tr><td style="text-align:left">PKIZ</td><td style="text-align:left">6.15</td><td style="text-align:left">1676.4</td></tr><tr><td style="text-align:left">Fernet</td><td style="text-align:left">5.55</td><td style="text-align:left">1957.8</td></tr></tbody></table><blockquote><p>※1 ApacheBench には最大要求サイズがあり、PKI または PKIZ トークンの ( X-Auth-Token + X-Subject-Token) がこれを超える。そのため、Stack Overflow での提案に沿って ApacheBench 最大要求サイズを広げた後、再コンパイルすることでこの制限を回避している。</p></blockquote><h1 id="参考URL"><a href="#参考URL" class="headerlink" title="参考URL"></a>参考URL</h1><ul><li><a href="https://developer.ibm.com/opentech/2015/11/11/deep-dive-keystone-fernet-tokens/" target="_blank" rel="noopener">https://developer.ibm.com/opentech/2015/11/11/deep-dive-keystone-fernet-tokens/</a></li><li><a href="https://blog.dolphm.com/the-anatomy-of-openstack-keystone-token-formats/" target="_blank" rel="noopener">https://blog.dolphm.com/the-anatomy-of-openstack-keystone-token-formats/</a></li><li><a href="https://www.slideshare.net/priti_desai/deep-dive-into-keystone-tokens-and-lessons-learned" target="_blank" rel="noopener">https://www.slideshare.net/priti_desai/deep-dive-into-keystone-tokens-and-lessons-learned</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;Keystone のトークンは、2つ以上の技術の層で構成される階層構造となっている。&lt;br&gt;ペイロードは、いくつかのトランスポート形式でラッ
      
    
    </summary>
    
    
      <category term="OpenStack" scheme="http://haystacker.net/tags/OpenStack/"/>
    
  </entry>
  
  <entry>
    <title>[徹底解説] Linux パイプのしくみ</title>
    <link href="http://haystacker.net/linux-pipe-deep-dive/"/>
    <id>http://haystacker.net/linux-pipe-deep-dive/</id>
    <published>2018-10-08T22:13:51.000Z</published>
    <updated>2019-01-20T04:55:34.794Z</updated>
    
    <content type="html"><![CDATA[<p>パイプは、1970年初頭に Third Edition Unix で実装された、Unix の IPC (Interprocess Communication / プロセス間通信) 。<br>パイプは、関連プロセス間でデータの受け渡しを行い、異なるプログラムを実行する2プロセスにおいて、一方の出力をもう一方の入力とすることができる。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>パイプは以下のように使用される。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls / | wc -l</span></span><br><span class="line">22</span><br></pre></td></tr></table></figure></p><p>この例の場合、以下のように順に処理されている。</p><ol><li><p><code>ls /</code> コマンドで対象ファイルの一覧を表示する。</p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">bin   dev  home  lib64  mnt  <span class="keyword">proc</span><span class="title">  run</span> <span class="title">  srv</span> <span class="title"> tmp</span> <span class="title"> vagrant</span> <span class="title"> work</span></span><br><span class="line"><span class="title">boot</span> <span class="title"> etc</span> <span class="title"> lib</span> <span class="title">  media</span> <span class="title"> opt</span> <span class="title"> root</span> <span class="title"> sbin</span> <span class="title"> sys</span> <span class="title"> usr</span> <span class="title"> var</span></span><br></pre></td></tr></table></figure></li><li><p>前の出力結果を入力値として、<code>wc -l</code> を実行して出力ライン数をカウント・表示する。</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/linux-pipe-deep-dive//pipe01.png" width="650px"></p><h1 id="パイプの実装"><a href="#パイプの実装" class="headerlink" title="パイプの実装"></a>パイプの実装</h1><p>カーネルにおけてパイプは以下のように実装されている。</p><ul><li>パイプはファイルシステム上に実態を持たないが、 inode 構造体などの管理構造を維持する必要があるため、pipefs という仮想ファイルシステム (VFS) を導入している</li><li>pipefs ファイルシステムは、システムのディレクトリツリーにマウントポイントを持っていないため、ユーザから見ることはできない</li><li>pipefs のエントリポイントは、シェルや他のプログラムでパイプを実装するために使用される <code>pipe(2)</code> システムコール</li><li><code>pipe(2)</code> は新しいパイプを作成し、ファイルディスクリプターを二つ返す（ディスクリプターのうち、一方はパイプの読み出し側を、もう一方は 書き込み側を参照している）</li></ul><h1 id="パイプ-I-O、バッファリング、容量"><a href="#パイプ-I-O、バッファリング、容量" class="headerlink" title="パイプ I/O、バッファリング、容量"></a>パイプ I/O、バッファリング、容量</h1><p>Linux ではパイプの容量が限られており、パイプの容量がフルになると <code>write(2)</code>がブロックされる（<code>O_NONBLOCK</code> フラグがセットされている場合は失敗する）。<br>Linux 2.6.35 以降、デフォルトのパイプ容量は 65,536 バイト、それ以前のバージョンでは、パイプの容量はシステムのページサイズと同一（例えば i386 の場合は 4,096 バイト）となっている。</p><p>プロセスが空のパイプからの読み取りを試みた際、<code>read(2)</code> はデータがパイプ内で利用可能になるまでブロックする。<br>パイプの書き込み側を指すファイルディスクリプタがすべて閉じられた場合、パイプから読み取りを試みると EOF が返される（<code>read(2)</code> が 0 を返す）。</p><p>プロセスがフルになったパイプに書き込もうとすると、write 呼び出しが成功するのに十分なデータがパイプから読み取られるまで、<code>write(2)</code> はブロックされる。<br>パイプの読み込み側のファイルディスクリプタがすべて閉じられると、パイプに書き込んだ際に <code>SIGPIPE</code> シグナルが送られる。<br>呼び出し元のプロセスがこのこのシグナルを無視している場合、<code>write(2)</code> はエラー <code>EPIPE</code> で失敗する。</p><p>つまり、プロセスAからの書き込みと、プロセスBからの読み込みが同じ速度で行われている場合は、最大のパフォーマンスを出すことができるが、速度が乖離している場合には、パフォーマンス劣化を引き起こす場合があるので、注意が必要となる。</p><h1 id="シェルでパイプを行う方法"><a href="#シェルでパイプを行う方法" class="headerlink" title="シェルでパイプを行う方法"></a>シェルでパイプを行う方法</h1><p>ここからは、Linux においてプロセスがどのように生成されるのかについて、理解していることを前提として説明をしていく。<br>ご存知でない方は <a href="../linux-process-creation-deep-dive">“[徹底解説] Linux プロセス生成のしくみ”</a> を参照のこと。</p><p>シェルは、「リダイレクションの実装方法」と非常によく似た方法でパイプを実装します。<br>基本的には、親プロセスは、一緒にパイプ処理される2つのプロセスごとに、 <code>pipe(2)</code> を1回呼び出します。<br>上記の例では、bash は2つのパイプを作成するために <code>pipe(2)</code> を2回呼び出す必要があります。次に、bash はプロセスごとに1回ずつフォークします（この例では3回）。<br>各子は1つのコマンドを実行します。<br>しかし、子供がコマンドを実行する前に、stdin または stdout（またはその両方）を上書きします。上記の例では、次のように動作します。</p><ul><li>bash は2つのパイプを作成します.1つはソートするパイプ、もう1つはソートするパイプです</li><li>bash は自分自身を3回フォークします（各コマンドごとに1つの親プロセスと3つの子プロセス）</li><li>子1 (<code>ls</code>) は、標準出力ファイル記述子をパイプ A の書き込み終了に設定します</li><li>子2 (<code>sort</code>) は、パイプ A の読み込み側のファイルディスクリプタを stdin に設定します（<code>ls</code> からの入力を読み込むため）</li><li>子2 (<code>sort</code>) は、標準出力ファイル記述子をパイプBの書込み終了に設定します</li><li>子3 (<code>less</code>) は、パイプ B の読み込み側のファイルディスクリプタを stdin に設定します（<code>sort</code> からの入力を読み込むため）</li><li>それぞれの子はコマンドを実行する</li></ul><p>カーネルはプロセスを自動的にスケジューリングして、大まかに並行して実行します。<br>子2がそれを読み取る前に子1がパイプAにあまりにも多くの書き込みを行った場合、子2はパイプから読み出すまでの間、しばらくブロックします。<br>これは通常、あるプロセスが他のプロセスがデータの処理を開始するのを待つ必要がないため、非常に高いレベルの効率を可能にします。<br>もう1つの理由は、パイプのサイズが限られていることです（通常、メモリの1ページのサイズ）。</p><h1 id="パイプサンプルコード"><a href="#パイプサンプルコード" class="headerlink" title="パイプサンプルコード"></a>パイプサンプルコード</h1><p>ここでは、bash のようなプログラムがパイプを実装する方法の C の例を示します。<br>私の例はかなりシンプルで、2つの引数を受け取ります。ディレクトリと検索する文字列です。<br><code>ls -la</code> を実行してディレクトリの内容を取得し、<code>grep</code> にパイプして文字列を検索します。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_END 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_END 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid, pid_ls, pid_grep;</span><br><span class="line">    <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Syntax: test . filename</span></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Please specify the directory to search and the filename to search for\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"parent: Grepping %s for %s\n"</span>, argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create an unnamed pipe</span></span><br><span class="line">    <span class="keyword">if</span> (pipe(pipefd) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"parent: Failed to create pipe\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fork a process to run grep</span></span><br><span class="line">    pid_grep = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid_grep == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"parent: Could not fork process to run grep\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid_grep == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"child: grep child will now run\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set fd[0] (stdin) to the read end of the pipe</span></span><br><span class="line">        <span class="keyword">if</span> (dup2(pipefd[READ_END], STDIN_FILENO) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"child: grep dup2 failed\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Close the pipe now that we've duplicated it</span></span><br><span class="line">        close(pipefd[READ_END]);</span><br><span class="line">        close(pipefd[WRITE_END]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Setup the arguments/environment to call</span></span><br><span class="line">        <span class="keyword">char</span> *new_argv[] = &#123; <span class="string">"/bin/grep"</span>, argv[<span class="number">2</span>], <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">char</span> *envp[] = &#123; <span class="string">"HOME=/"</span>, <span class="string">"PATH=/bin:/usr/bin"</span>, <span class="string">"USER=brandon"</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call execve(2) which will replace the executable image of this</span></span><br><span class="line">        <span class="comment">// process</span></span><br><span class="line">        execve(new_argv[<span class="number">0</span>], &amp;new_argv[<span class="number">0</span>], envp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Execution will never continue in this process unless execve returns</span></span><br><span class="line">        <span class="comment">// because of an error</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"child: Oops, grep failed!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fork a process to run ls</span></span><br><span class="line">    pid_ls = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid_ls == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"parent: Could not fork process to run ls\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid_ls == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"child: ls child will now run\n"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"---------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set fd[1] (stdout) to the write end of the pipe</span></span><br><span class="line">        <span class="keyword">if</span> (dup2(pipefd[WRITE_END], STDOUT_FILENO) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ls dup2 failed\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Close the pipe now that we've duplicated it</span></span><br><span class="line">        close(pipefd[READ_END]);</span><br><span class="line">        close(pipefd[WRITE_END]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Setup the arguments/environment to call</span></span><br><span class="line">        <span class="keyword">char</span> *new_argv[] = &#123; <span class="string">"/bin/ls"</span>, <span class="string">"-la"</span>, argv[<span class="number">1</span>], <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">char</span> *envp[] = &#123; <span class="string">"HOME=/"</span>, <span class="string">"PATH=/bin:/usr/bin"</span>, <span class="string">"USER=brandon"</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call execve(2) which will replace the executable image of this</span></span><br><span class="line">        <span class="comment">// process</span></span><br><span class="line">        execve(new_argv[<span class="number">0</span>], &amp;new_argv[<span class="number">0</span>], envp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Execution will never continue in this process unless execve returns</span></span><br><span class="line">        <span class="comment">// because of an error</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"child: Oops, ls failed!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent doesn't need the pipes</span></span><br><span class="line">    close(pipefd[READ_END]);</span><br><span class="line">    close(pipefd[WRITE_END]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"parent: Parent will now wait for children to finish execution\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for all children to finish</span></span><br><span class="line">    <span class="keyword">while</span> (wait(<span class="literal">NULL</span>) &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"---------------------\n"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"parent: Children has finished execution, parent is done\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私はそれを徹底的にコメントしたので、うまくいけば意味がある。</p><h1 id="名前付きパイプと無名パイプ"><a href="#名前付きパイプと無名パイプ" class="headerlink" title="名前付きパイプと無名パイプ"></a>名前付きパイプと無名パイプ</h1><p>上記の例では、名前のない/匿名のパイプを使用しています。<br>これらのパイプは一時的なもので、プログラムが終了するか、ファイル記述子がすべて閉じられると破棄されます。<br>それらは最も一般的なタイプのパイプです。</p><p>名前付きパイプは、FIFO (first in, first out) としても知られ、ハードディスク上の名前付きファイルとして作成されます。<br>無関係な複数のプログラムを開いて使用することができます。<br>非常にシンプルなクライアント/サーバー型設計のために、複数のライターを1つのリーダーで簡単に作成できます。<br>たとえば、Nagios はこれを行います。<br>マスタープロセスは名前付きパイプを読み込み、すべての子プロセスは名前付きパイプにコマンドを書き込みます。</p><p>名前付きパイプは、<code>mkfifo</code> コマンドまたは <code>syscall</code> を使用して作成しています。<br>例：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkfifo ~/test_pipe</span></span><br></pre></td></tr></table></figure></p><p>彼らの作成以外にも、名前のないパイプとほとんど同じ働きをします。<br>作成したら、 <code>open(2)</code> を使って開くことができます。<br><code>O_RDONLY</code> を使って読み込み終了を開くか、<code>O_WRONLY</code> を使って書き込み終了をオープンする必要があります。<br>ほとんどのオペレーティングシステムでは単方向パイプが実装されているため、読み取り/書き込みモードで開くことはできません。</p><p>FIFO は、複数のプロセスを持つシステムのために、単方向 IPC 技術としてしばしば使用されます。<br>マルチスレッドアプリケーションは、共有メモリセグメントなどの他の IPC 技術と同様に、名前付きパイプまたは名前のないパイプを使用することもできます。</p><p>FIFO は inode として作成され、<code>i_pipe</code> プロパティは実際のパイプへの参照として設定されます。<br>名前がファイルシステム上に存在するかもしれませんが、inode が読み込まれると、パイプは無名のパイプのように振る舞い、メモリ内で動作するため、パイプは基盤となるデバイスへの I/O を引き起こしません。</p><h1 id="参考-URL"><a href="#参考-URL" class="headerlink" title="参考 URL"></a>参考 URL</h1><ul><li>How Linux pipes work under the hood<ul><li><a href="https://brandonwamboldt.ca/how-linux-pipes-work-under-the-hood-1518/" target="_blank" rel="noopener">https://brandonwamboldt.ca/how-linux-pipes-work-under-the-hood-1518/</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;パイプは、1970年初頭に Third Edition Unix で実装された、Unix の IPC (Interprocess Communication / プロセス間通信) 。&lt;br&gt;パイプは、関連プロセス間でデータの受け渡しを行い、異なるプログラムを実行する2プロセ
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://haystacker.net/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>[徹底解説] Linux リダイレクトのしくみ</title>
    <link href="http://haystacker.net/linux-redirect-deep-dive/"/>
    <id>http://haystacker.net/linux-redirect-deep-dive/</id>
    <published>2018-10-07T20:54:07.000Z</published>
    <updated>2018-11-05T17:42:18.899Z</updated>
    
    <content type="html"><![CDATA[<p>フードの中で bash リダイレクションがどのように機能するのか疑問に思ったことはありますか？<br>リダイレクト自体はかなり簡単です。</p><p>bash を使うと、ファイルをプロセスの stdin にリダイレクトすることも、プロセスの stdout/stderr をファイルや他のファイル記述子にリダイレクトすることもできます（ stderr を stdout にリダイレクトするなど、ファイル記述子なので）。</p><p>リダイレクトは次のようになります。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -la &gt; output.txt</span></span><br></pre></td></tr></table></figure></p><p>上記のコマンドは、stdout を <code>ls</code> コマンドから output.txt ファイルにリダイレクトします。<br>stderr をリダイレクトする方法は次のとおりです。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -la 2 &gt; errors.txt</span></span><br></pre></td></tr></table></figure></p><p>これにより、stderr から errors.txt にすべてが送信されます（許可が拒否されたメッセージなど）。<br>そのため、たとえば次のような場合は、<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">ls</span> <span class="string">/root</span> &gt; <span class="string">/dev/null</span></span><br></pre></td></tr></table></figure></p><p>ルート以外のユーザーは、出力を /dev/null にリダイレクトしたにもかかわらずエラーメッセージが表示されます。<br>通常、エラーは stderr に書き込まれます。</p><p>最後に、stdin を出力とするファイルの入力リダイレクションを行うこともできます。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bash &lt; commands.txt</span></span><br></pre></td></tr></table></figure></p><p>上記のコマンドは、commands.txt の内容を読み込み、bash インタプリタを使用してそれらを実行します。</p><h1 id="リダイレクトの実装"><a href="#リダイレクトの実装" class="headerlink" title="リダイレクトの実装"></a>リダイレクトの実装</h1><p>とにかく、この記事のポイントは、そのような機能がどのように実装されているかです。<br>プロセスフォークを理解すれば、非常に簡単になることが分かります。</p><p>プロセスが別のプロセス（例えば bash を実行しているls）を実行したいとき、それは一般的に次のように動作します：</p><ol><li>メインプロセス（bash など）は、<code>fork</code> という <code>glibc</code> ラッパーを使って <code>fork</code> します（sidenode: <code>fork</code> では、実際には <code>fork(2)</code> システムコールではなく <code>glibc</code> ラッパーを呼び出しています）。<code>glibc</code> ラッパーは、<code>clone(2)</code> がより強力であるため、<code>fork(2)</code> のシステムコールではなく、システムコール（syscall）</li><li><code>fork</code> されたプロセスは、出力リダイレクトがコマンドラインで入力されたことを確認し、<code>open(2)</code> のシステムコールまたは同等のものを使用して指定されたファイルを開きます。</li><li><code>fork</code> されたプロセスは <code>dup2</code> を呼び出して、新しく開かれたファイル記述子を stdin/stdout/stderr にコピーします。</li><li><code>fork</code> されたプロセスは元のファイルハンドラを閉じて、リソースリークを防ぎます。</li><li><code>fork</code> されたプロセスは <code>execve(2)</code> のシステムコールまたは同様のものを呼び出して、実行可能なイメージを実行するプロセスのイメージ（たとえば <code>ls</code>）に置き換えるか、</li></ol><p>同じことをするコード例を次に示します。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123; <span class="string">"/bin/ls"</span>, <span class="string">"-la"</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> *envp[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"HOME=/"</span>,</span><br><span class="line">        <span class="string">"PATH=/bin:/usr/bin"</span>,</span><br><span class="line">        <span class="string">"USER=brandon"</span>,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/home/brandon/ls.log"</span>, O_WRONLY|O_CREAT|O_TRUNC, <span class="number">0666</span>);</span><br><span class="line">    dup2(fd, <span class="number">1</span>); <span class="comment">// stdout is file descriptor 1</span></span><br><span class="line">    close(fd);</span><br><span class="line">    execve(argv[<span class="number">0</span>], &amp;argv[<span class="number">0</span>], envp);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Oops!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のコードは stdout を ls.log に設定し、 <code>ls -la</code> を実行します。<br><code>execve</code> が失敗しない限り、<code>fprintf</code> 以下は実行されませんのでご注意ください。<br>それで、リダイレクトが bash でどのように実装されるのです！</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2247 </span> execve(<span class="string">"./redirect"</span>, [<span class="string">"./redirect"</span>], [/* <span class="number">18</span> vars */]) = <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2247 </span> <span class="keyword">open</span>(<span class="string">"/home/vagrant/ls.log"</span>, O_WRONLY|O_CREAT|O_TRUNC, <span class="number">0666</span>) = <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2247 </span> dup2(<span class="number">3</span>, <span class="number">1</span>)                        = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2247 </span> execve(<span class="string">"/bin/ls"</span>, [<span class="string">"/bin/ls"</span>, <span class="string">"-la"</span>], [/* <span class="number">3</span> vars */]) = <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2247 </span> <span class="keyword">write</span>(<span class="number">1</span>, <span class="string">"total 64\ndrwxrwxrwx 2 root    ro"</span>..., <span class="number">620</span>) = <span class="number">620</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2247 </span> exit_group(<span class="number">0</span>)                     = ?</span><br><span class="line"><span class="symbol">2247 </span> +++ exited with <span class="number">0</span> +++</span><br></pre></td></tr></table></figure><p>/usr/include/unistd.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Standard file descriptors.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDIN_FILENO    0       <span class="comment">/* Standard input.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDOUT_FILENO   1       <span class="comment">/* Standard output.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDERR_FILENO   2       <span class="comment">/* Standard error output.  */</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># who</span><br><span class="line">root     pts/<span class="number">0</span>        <span class="number">2018-10-07</span> <span class="number">20</span>:<span class="number">10</span> (<span class="number">10.16.0.1</span>)</span><br><span class="line">root     pts/<span class="number">1</span>        <span class="number">2018-10-08</span> <span class="number">07</span>:<span class="number">54</span> (<span class="number">10.16.0.1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tty</span></span><br><span class="line"><span class="regexp">/dev/</span>pts<span class="regexp">/0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;フードの中で bash リダイレクションがどのように機能するのか疑問に思ったことはありますか？&lt;br&gt;リダイレクト自体はかなり簡単です。&lt;/p&gt;
&lt;p&gt;bash を使うと、ファイルをプロセスの stdin にリダイレクトすることも、プロセスの stdout/stderr を
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://haystacker.net/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>[徹底解説] Linux プロセス生成のしくみ</title>
    <link href="http://haystacker.net/linux-process-creation-deep-dive/"/>
    <id>http://haystacker.net/linux-process-creation-deep-dive/</id>
    <published>2018-10-06T22:53:08.000Z</published>
    <updated>2019-01-20T04:56:28.271Z</updated>
    
    <content type="html"><![CDATA[<p>Linux においてプロセスは、<code>fork(2)</code> および <code>clone(2)</code> システムコールを使用することにより生成された後、<code>exec(2)</code> システムコールを使用して新規プログラムが実行される。</p><p>まずは、実際のプロセス生成を模擬した以下のサンプルプログラムを実行し、プロセス生成のしくみについて理解を深めていく。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pid == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"プロセスの複製に失敗しました。\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;  <span class="comment">// 子プロセスの場合</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"ls コマンド実行のための子プロセス生成 (PID: %d)\n"</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// システムコールするため、引数および環境変数を設定</span></span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123; <span class="string">"/bin/ls"</span>, <span class="string">"-la"</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> *envp[] = &#123; <span class="string">"HOME=/"</span>, <span class="string">"PATH=/bin:/usr/bin"</span>, <span class="string">"USER=brandon"</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// execve(2) システムコールにより、プロセスを実行可能イメージに置き換える</span></span><br><span class="line">    execve(argv[<span class="number">0</span>], &amp;argv[<span class="number">0</span>], envp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// execve(2) からのリターンがない場合は異常終了</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"エラーが発生しました。\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;  <span class="comment">// 親プロセスの場合</span></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"親プロセスは子プロセスの実行完了するまで待機 (PID: %d)\n"</span>, getpid());</span><br><span class="line">    wait(&amp;status);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"子プロセスの実行完了 (リターンコード: %i)、および親プロセスの終了\n"</span>, status);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>サンプルコードを実行すると以下のような出力を得られる。<br>この出力結果より、まず、子プロセスが生成され、親プロセスは子プロセス完了を待機し、子プロセスの処理終了を受けて親プロセスが終了していることがわかる。</p><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">$ gcc -o fork_exec fork_exec.c</span><br><span class="line">$ strace -o /tmp/fork_exec.log -f ./fork_exec</span><br><span class="line">親プロセスは子プロセスの実行完了するまで待機 (PID: 18040)</span><br><span class="line">ls コマンド実行のための子プロセス生成 (PID: 18041)</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x<span class="number"> 2 </span>root root  <span class="number"> 40 </span>Oct <span class="number"> 7 </span>21:30 .</span><br><span class="line">drwxr-xr-x<span class="number"> 3 </span>root root  <span class="number"> 19 </span>Oct <span class="number"> 7 </span>21:23 ..</span><br><span class="line">-rwxr-xr-x<span class="number"> 1 </span>root root<span class="number"> 8792 </span>Oct <span class="number"> 7 </span>21:25 fork_exec</span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 1181 </span>Oct <span class="number"> 7 </span>21:25 fork_exec.c</span><br><span class="line">子プロセスの実行完了 (リターンコード: 0)、および親プロセスの終了</span><br></pre></td></tr></table></figure><p>strace の出力ファイルを参照すると、より詳細な内容を把握することができる。<br><img src="/linux-process-creation-deep-dive//fork_exec.png" width="300px"></p><ol><li><p>親プロセスから子プロセスをクローン</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">18040 </span>clone(child_stack=<span class="number">0</span>, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=<span class="number">0</span>x7fb6cbfeaa10) = <span class="number">18041</span></span><br></pre></td></tr></table></figure></li><li><p>親プロセスは子プロセスの実行が完了するまで待機</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// "親プロセスは子プロセスの実行完了するまで待機 (PID: 18040)"</span></span><br><span class="line"><span class="number">18040</span> wait4(<span class="number">-1</span>,  &lt;unfinished ...&gt;</span><br></pre></td></tr></table></figure></li><li><p>子プロセスが <code>execve()</code> によって実行可能状態に遷移</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// "ls コマンド実行のための子プロセス生成 (PID: 18041)"</span></span><br><span class="line"><span class="number">18041</span> execve(<span class="string">"/bin/ls"</span>, [<span class="string">"/bin/ls"</span>, <span class="string">"-la"</span>], [<span class="comment">/* 3 vars */</span>]) = <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p><code>ls</code> コマンドの実行・表示</p><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">// "total 16"</span><br><span class="line">// "drwxr-xr-x<span class="number"> 2 </span>root root  <span class="number"> 40 </span>Oct <span class="number"> 7 </span>21:30 ."</span><br><span class="line">// "drwxr-xr-x<span class="number"> 3 </span>root root  <span class="number"> 19 </span>Oct <span class="number"> 7 </span>21:23 .."</span><br><span class="line">// "-rwxr-xr-x<span class="number"> 1 </span>root root<span class="number"> 8792 </span>Oct <span class="number"> 7 </span>21:25 fork_exec"</span><br><span class="line">// "-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 1181 </span>Oct <span class="number"> 7 </span>21:25 fork_exec.c"</span><br></pre></td></tr></table></figure></li><li><p>子プロセスの終了 (リターンコード: 0)</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">18041 </span>exit_group(<span class="number">0</span>)                     = ?</span><br><span class="line"><span class="symbol">18041 </span>+++ exited with <span class="number">0</span> +++</span><br></pre></td></tr></table></figure></li><li><p>親プロセスで子プロセスの終了を受理・処理の再開</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">18040</span> <span class="string">&lt;...</span> <span class="string">wait4</span> <span class="string">resumed&gt;</span> <span class="string">[&#123;WIFEXITED(s)</span> <span class="string">&amp;&amp;</span> <span class="string">WEXITSTATUS(s)</span> <span class="string">==</span> <span class="number">0</span><span class="string">&#125;],</span> <span class="number">0</span><span class="string">,</span> <span class="literal">NULL</span><span class="string">)</span> <span class="string">=</span> <span class="number">18041</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="number">18040</span> <span class="meta">---</span> <span class="string">SIGCHLD</span> <span class="string">&#123;si_signo=SIGCHLD,</span> <span class="string">si_code=CLD_EXITED,</span> <span class="string">si_pid=18041,</span> <span class="string">si_uid=0,</span> <span class="string">si_status=0,</span> <span class="string">si_utime=0,</span> <span class="string">si_stime=0&#125;</span> <span class="meta">---</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">//</span> <span class="string">"子プロセスの実行完了 (リターンコード: 0)、および親プロセスの終了"</span></span><br></pre></td></tr></table></figure></li><li><p>親プロセスの終了 (リターンコード: 0)</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">18040 </span>exit_group(<span class="number">0</span>)                     = ?</span><br><span class="line"><span class="symbol">18040 </span>+++ exited with <span class="number">0</span> +++</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux においてプロセスは、&lt;code&gt;fork(2)&lt;/code&gt; および &lt;code&gt;clone(2)&lt;/code&gt; システムコールを使用することにより生成された後、&lt;code&gt;exec(2)&lt;/code&gt; システムコールを使用して新規プログラムが実行される。&lt;/p
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://haystacker.net/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack API 実装例</title>
    <link href="http://haystacker.net/howto-use-openstack-api/"/>
    <id>http://haystacker.net/howto-use-openstack-api/</id>
    <published>2018-09-08T03:05:27.000Z</published>
    <updated>2018-09-26T14:17:26.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="curl-使用"><a href="#curl-使用" class="headerlink" title="curl 使用"></a>curl 使用</h1><p>まずは OpenStack の環境変数を読み込む。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/overcloudrc</span><br></pre></td></tr></table></figure><p>次にユーザ名とパスワード、ドメイン名を指定し、トークンを取得する。<br>keystone で v2 を使用しているか v3 を使用しているかによって トークンの表示位置が変更するので注意が必要。<br>今回は、keysotne v3 を前提にしている。<br><a id="more"></a><br><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">token=$(curl -i -s -X POST -H <span class="string">'Content-Type: application/json'</span> \</span><br><span class="line">-d <span class="string">'&#123;"</span>auth<span class="string">": &#123;"</span>identity<span class="string">": &#123;"</span>methods<span class="string">": ["</span><span class="string">'$&#123;OS_AUTH_TYPE&#125;'</span><span class="string">"], "</span>password<span class="string">": &#123;"</span>user<span class="string">": &#123;"</span>name<span class="string">": "</span><span class="string">'$&#123;OS_USERNAME&#125;'</span><span class="string">", "</span>password<span class="string">": "</span><span class="string">'$&#123;OS_PASSWORD&#125;'</span><span class="string">", "</span>domain<span class="string">": &#123;"</span>name<span class="string">": "</span><span class="string">'$&#123;OS_PROJECT_DOMAIN_NAME&#125;'</span><span class="string">"&#125;&#125;&#125;&#125;, "</span>scope<span class="string">": &#123;"</span>project<span class="string">": &#123;"</span>name<span class="string">": "</span><span class="string">'$&#123;OS_PROJECT_NAME&#125;'</span><span class="string">", "</span>domain<span class="string">": &#123;"</span>name<span class="string">": "</span><span class="string">'$&#123;OS_PROJECT_DOMAIN_NAME&#125;'</span><span class="string">"&#125;&#125;&#125;&#125;&#125;'</span> \</span><br><span class="line">$&#123;OS_AUTH_URL&#125;/auth/tokens?nocatalog | grep <span class="string">"X-Subject-Token"</span> | cut -d<span class="string">" "</span> -f2)</span><br></pre></td></tr></table></figure></p><p>あとは、先ほど取得したトークンを “X-Auth-Token” にセットして、API を発行すれば OK。</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">curl -i -s -X PUT $&#123;nova_endpoint&#125;/$&#123;project_id&#125;/os-services/force-down \</span><br><span class="line">-<span class="ruby">H <span class="string">"Content-Type: application/json"</span> \</span></span><br><span class="line"><span class="ruby">-H <span class="string">"Accept: application/json "</span> \</span></span><br><span class="line"><span class="ruby">-H <span class="string">"X-OpenStack-Nova-API-Version: 2.11"</span> \</span></span><br><span class="line"><span class="ruby">-H <span class="string">"X-Auth-Token: $&#123;token&#125;"</span> \</span></span><br><span class="line"><span class="ruby">-d <span class="string">'&#123;"binary": "nova-compute", "host": "'</span>$&#123;target&#125;<span class="string">'", "forced_down": '</span>$&#123;forcedown&#125;<span class="string">'&#125;'</span></span></span><br></pre></td></tr></table></figure><p>コード全文は以下の通りとなる。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function help() &#123;</span><br><span class="line">  echo &quot;usage: $&#123;0##*/&#125; &lt;target&gt; &lt;action&gt;&quot;</span><br><span class="line">  echo &quot;usage: $&#123;0##*/&#125; [--help]&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;Positional arguments:&quot;</span><br><span class="line">  echo &quot;  &lt;target&gt;    Computer name that you want to do force-down.&quot;</span><br><span class="line">  echo &quot;  &lt;action&gt;    true(set force-down) or false(unset force-down)&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;Optional arguments:&quot;</span><br><span class="line">  echo &quot;  --help      Display help menu.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while getopts &quot;:vh-:&quot; opt; do</span><br><span class="line">  case &quot;$opt&quot; in</span><br><span class="line">    -)</span><br><span class="line">      case &quot;$&#123;OPTARG&#125;&quot; in</span><br><span class="line">        help)</span><br><span class="line">          help</span><br><span class="line">          exit 0</span><br><span class="line">          ;;</span><br><span class="line">      esac</span><br><span class="line">      ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ $# -ne 2 ]; then</span><br><span class="line">  help</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;[ERROR] Set the correct number of arguments. (require: 2, input: $#)&quot;</span><br><span class="line">  exit 1</span><br><span class="line">else</span><br><span class="line">  target=$1</span><br><span class="line"></span><br><span class="line">  case &quot;$2&quot; in</span><br><span class="line">    &quot;true&quot; | &quot;false&quot; )</span><br><span class="line">      forcedown=$2</span><br><span class="line">      ;;</span><br><span class="line">    * )</span><br><span class="line">      help</span><br><span class="line">      echo &quot;&quot;</span><br><span class="line">      echo &quot;[ERROR] Please set &apos;true&apos; or &apos;false&apos; as 2nd arguments.&quot;</span><br><span class="line">      exit 1</span><br><span class="line">      ;;</span><br><span class="line">  esac</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">source ~/overcloudrc</span><br><span class="line"></span><br><span class="line">project_id=`openstack project list | grep &quot; $&#123;OS_PROJECT_NAME&#125; &quot; |  cut -d&quot; &quot; -f2`</span><br><span class="line">nova_endpoint=`openstack endpoint list | grep &quot; compute &quot; | grep &quot; public &quot; | cut -d&quot;|&quot; -f8 | sed -e &quot;s/ //g&quot;`</span><br><span class="line"></span><br><span class="line">token=$(curl -i -s -X POST -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;auth&quot;: &#123;&quot;identity&quot;: &#123;&quot;methods&quot;: [&quot;&apos;$&#123;OS_AUTH_TYPE&#125;&apos;&quot;], &quot;password&quot;: &#123;&quot;user&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_USERNAME&#125;&apos;&quot;, &quot;password&quot;: &quot;&apos;$&#123;OS_PASSWORD&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;, &quot;scope&quot;: &#123;&quot;project&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_NAME&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;&#125;&apos; $&#123;OS_AUTH_URL&#125;/auth/tokens?nocatalog | grep &quot;X-Subject-Token&quot; | cut -d&quot; &quot; -f2)</span><br><span class="line">token=`echo $&#123;token&#125; | sed -e &quot;s/[\r\n]\+//g&quot;`</span><br><span class="line"></span><br><span class="line">curl -i -s -X PUT $&#123;nova_endpoint&#125;/$&#123;project_id&#125;/os-services/force-down -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json &quot; -H &quot;X-OpenStack-Nova-API-Version: 2.11&quot; -H &quot;X-Auth-Token: $&#123;token&#125;&quot; -d &apos;&#123;&quot;binary&quot;: &quot;nova-compute&quot;, &quot;host&quot;: &quot;&apos;$&#123;target&#125;&apos;&quot;, &quot;forced_down&quot;: &apos;$&#123;forcedown&#125;&apos;&#125;&apos; &gt;/dev/null</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">  echo &quot;[INFO] force-down was finished successfully&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;[ERROR] force-down was failed.&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">nova hypervisor-list</span><br></pre></td></tr></table></figure><p>実行すると以下のように出力される。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./api_nova_forcedown.sh --<span class="built_in">help</span></span><br><span class="line">usage: api_nova_forcedown.sh &lt;target&gt; &lt;action&gt;</span><br><span class="line">usage: api_nova_forcedown.sh [--<span class="built_in">help</span>]</span><br><span class="line"></span><br><span class="line">Positional arguments:</span><br><span class="line">  &lt;target&gt;    Computer name that you want to <span class="keyword">do</span> force-down.</span><br><span class="line">  &lt;action&gt;    <span class="literal">true</span>(<span class="built_in">set</span> force-down) or <span class="literal">false</span>(<span class="built_in">unset</span> force-down)</span><br><span class="line"></span><br><span class="line">Optional arguments:</span><br><span class="line">  --<span class="built_in">help</span>      Display <span class="built_in">help</span> menu.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh ./api_nova_forcedown.sh jfc-cmp01.nttdata.co.jp <span class="literal">true</span></span><br><span class="line">[INFO] force-down was finished successfully</span><br><span class="line">+--------------------------------------+-------------------------+-------+---------+</span><br><span class="line">| ID                                   | Hypervisor hostname     | State | Status  |</span><br><span class="line">+--------------------------------------+-------------------------+-------+---------+</span><br><span class="line">| 1ff4b167-87c0-409b-87e9-298be57c6e11 | jfc-cmp02.nttdata.co.jp | up    | enabled |</span><br><span class="line">| d40ee745-18e6-43f6-b605-04ac6bb32972 | jfc-cmp01.nttdata.co.jp | down  | enabled |</span><br><span class="line">+--------------------------------------+-------------------------+-------+---------+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh ./api_nova_forcedown.sh jfc-cmp01.nttdata.co.jp <span class="literal">false</span></span><br><span class="line">[INFO] force-down was finished successfully</span><br><span class="line">+--------------------------------------+-------------------------+-------+---------+</span><br><span class="line">| ID                                   | Hypervisor hostname     | State | Status  |</span><br><span class="line">+--------------------------------------+-------------------------+-------+---------+</span><br><span class="line">| 1ff4b167-87c0-409b-87e9-298be57c6e11 | jfc-cmp02.nttdata.co.jp | up    | enabled |</span><br><span class="line">| d40ee745-18e6-43f6-b605-04ac6bb32972 | jfc-cmp01.nttdata.co.jp | up    | enabled |</span><br><span class="line">+--------------------------------------+-------------------------+-------+---------+</span><br></pre></td></tr></table></figure><h1 id="Python-SDK-使用"><a href="#Python-SDK-使用" class="headerlink" title="Python SDK 使用"></a>Python SDK 使用</h1><p>curl を使用するケースと同様、こちらも keystone v2 と v3 で実装が若干異なってくるが、今回は v3 を前提に話を進める。</p><p>まずは OpenStack の環境変数を読み込む。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/overcloudrc</span><br></pre></td></tr></table></figure><p>次に認証情報をもとにセッションを確立する。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">v3_auth = v3.Password(auth_url=os_auth_url,</span><br><span class="line">                      username=os<span class="selector-class">.environ</span>[<span class="string">'OS_USERNAME'</span>],</span><br><span class="line">                      password=os<span class="selector-class">.environ</span>[<span class="string">'OS_PASSWORD'</span>],</span><br><span class="line">                      project_name=os<span class="selector-class">.environ</span>[<span class="string">'OS_PROJECT_NAME'</span>],</span><br><span class="line">                      project_domain_name=os<span class="selector-class">.environ</span>[<span class="string">'OS_PROJECT_DOMAIN_NAME'</span>],</span><br><span class="line">                      user_domain_name=os<span class="selector-class">.environ</span>[<span class="string">'OS_USER_DOMAIN_NAME'</span>])</span><br><span class="line"></span><br><span class="line">sess = session.Session(auth=v3_auth, verify=False)</span><br></pre></td></tr></table></figure></p><p>Nova API を使用する場合、最初に Nova Client のインスタンスを生成する。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import novaclient.client</span><br><span class="line">n_sess = novaclient<span class="selector-class">.client</span><span class="selector-class">.Client</span>(<span class="number">2</span>, session=sess)</span><br></pre></td></tr></table></figure></p><p>任意の Nova API を実行し、結果を “result” に格納する。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">result = n_sess<span class="selector-class">.servers</span><span class="selector-class">.list</span>()</span><br></pre></td></tr></table></figure></p><p>最後に “result” の値を出力する。<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="literal">result</span>:</span><br><span class="line">  print r.<span class="built_in">id</span>, r.<span class="built_in">name</span>;</span><br></pre></td></tr></table></figure></p><p>コード全文は以下の通り。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keystoneauth1.identity <span class="keyword">import</span> v3</span><br><span class="line"><span class="keyword">from</span> keystoneauth1 <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line">    logging.basicConfig(level=logging.INFO)</span><br><span class="line">    self.logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">authorization</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.environ.get(<span class="string">'http_proxy'</span>) <span class="keyword">or</span> os.environ.get(<span class="string">'https_proxy'</span>):</span><br><span class="line">      self.logger.WARN(<span class="string">"Proxy env vars set"</span>)</span><br><span class="line"></span><br><span class="line">    os_auth_url = os.environ[<span class="string">'OS_AUTH_URL'</span>]</span><br><span class="line">    os_auth_url = os_auth_url.replace(<span class="string">'v2.0'</span>, <span class="string">'v3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os_auth_url.endswith(<span class="string">'v3'</span>):</span><br><span class="line">      os_auth_url += <span class="string">'/v3'</span></span><br><span class="line"></span><br><span class="line">    v3_auth = v3.Password(auth_url=os_auth_url,</span><br><span class="line">                          username=os.environ[<span class="string">'OS_USERNAME'</span>],</span><br><span class="line">                          password=os.environ[<span class="string">'OS_PASSWORD'</span>],</span><br><span class="line">                          project_name=os.environ[<span class="string">'OS_PROJECT_NAME'</span>],</span><br><span class="line">                          project_domain_name=os.environ[<span class="string">'OS_PROJECT_DOMAIN_NAME'</span>],</span><br><span class="line">                          user_domain_name=os.environ[<span class="string">'OS_USER_DOMAIN_NAME'</span>])</span><br><span class="line"></span><br><span class="line">    k_sess = session.Session(auth=v3_auth, verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> k_sess</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">nova_sess</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> novaclient.client</span><br><span class="line">    sess = self.authorization()</span><br><span class="line">    n_sess = novaclient.client.Client(<span class="number">2</span>, session=sess)</span><br><span class="line">    <span class="keyword">return</span> n_sess</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">nova_list</span><span class="params">(self)</span>:</span></span><br><span class="line">    n_sess = self.nova_sess()</span><br><span class="line">    result = n_sess.servers.list()</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">      <span class="keyword">print</span> r.id, r.name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">neutron_sess</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> neutronclient.neutron.client</span><br><span class="line">    sess = self.authorization()</span><br><span class="line">    q_sess = neutronclient.neutron.client.Client(<span class="string">'2.0'</span>, session=sess)</span><br><span class="line">    <span class="keyword">return</span> q_sess</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">neutron_list</span><span class="params">(self)</span>:</span></span><br><span class="line">    q_sess = self.neutron_sess()</span><br><span class="line">    result = q_sess.list_networks()[<span class="string">'networks'</span>]</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">      <span class="keyword">for</span> k, v <span class="keyword">in</span> r.items():</span><br><span class="line">        print(<span class="string">"%s : %s"</span> % (k, v))</span><br><span class="line">      print(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Sample()</span><br><span class="line">s.nova_list()</span><br><span class="line">s.neutron_list()</span><br></pre></td></tr></table></figure></p><p>実行すると以下の通り出力される。<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="number">03116438</span>-bd19<span class="number">-4452</span><span class="number">-8339</span>-cd992c50d156 jfc-cmp02</span><br><span class="line"><span class="number">988877</span>da<span class="number">-17</span>eb<span class="number">-4</span>a07-a610-ccab64eac23a jfc-ctr01</span><br><span class="line"><span class="number">71</span>d4cc92<span class="number">-9</span>ab4<span class="number">-4678</span>-bd53-b2c03ebe943e jfc-ctr02</span><br><span class="line"><span class="number">09</span>ae722c<span class="number">-8e05</span><span class="number">-4</span>a02-ad86-dbe7b2232775 jfc-cmp01</span><br><span class="line"><span class="number">3</span>a416f50<span class="number">-9</span>ea2<span class="number">-48</span>f5<span class="number">-9168</span><span class="number">-447</span>cda1c4f15 jfc-ctr03</span><br><span class="line"><span class="string">provider:</span><span class="string">physical_network :</span> ctlplane</span><br><span class="line"><span class="string">ipv6_address_scope :</span> None</span><br><span class="line"><span class="string">revision_number :</span> <span class="number">8</span></span><br><span class="line"><span class="string">port_security_enabled :</span> True</span><br><span class="line"><span class="string">provider:</span><span class="string">network_type :</span> flat</span><br><span class="line"><span class="string">id :</span> <span class="number">515</span>ab5ab-e73c<span class="number">-428</span>b-b145<span class="number">-4</span>f9b89fac431</span><br><span class="line"><span class="string">router:</span><span class="string">external :</span> False</span><br><span class="line"><span class="string">availability_zone_hints :</span> []</span><br><span class="line"><span class="string">availability_zones :</span> [u<span class="string">'nova'</span>]</span><br><span class="line"><span class="string">ipv4_address_scope :</span> None</span><br><span class="line"><span class="string">shared :</span> False</span><br><span class="line"><span class="string">project_id :</span> ebe0a369198a4b92b0f294ef22386756</span><br><span class="line"><span class="string">l2_adjacency :</span> True</span><br><span class="line"><span class="string">status :</span> ACTIVE</span><br><span class="line"><span class="string">subnets :</span> [u<span class="string">'a2509cf3-fb5e-4714-8820-1b94283ccdf7'</span>]</span><br><span class="line"><span class="string">description :</span></span><br><span class="line"><span class="string">tags :</span> []</span><br><span class="line"><span class="string">updated_at :</span> <span class="number">2018</span><span class="number">-07</span><span class="number">-27</span><span class="string">T10:</span><span class="number">47</span>:<span class="number">42</span>Z</span><br><span class="line"><span class="string">provider:</span><span class="string">segmentation_id :</span> None</span><br><span class="line"><span class="string">name :</span> ctlplane</span><br><span class="line"><span class="string">admin_state_up :</span> True</span><br><span class="line"><span class="string">tenant_id :</span> ebe0a369198a4b92b0f294ef22386756</span><br><span class="line"><span class="string">created_at :</span> <span class="number">2018</span><span class="number">-07</span><span class="number">-27</span><span class="string">T07:</span><span class="number">37</span>:<span class="number">22</span>Z</span><br><span class="line"><span class="string">mtu :</span> <span class="number">1500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">provider:</span><span class="string">physical_network :</span> external</span><br><span class="line"><span class="string">ipv6_address_scope :</span> None</span><br><span class="line"><span class="string">revision_number :</span> <span class="number">3</span></span><br><span class="line"><span class="string">port_security_enabled :</span> True</span><br><span class="line"><span class="string">provider:</span><span class="string">network_type :</span> flat</span><br><span class="line"><span class="string">id :</span> <span class="number">91</span>c89b6a<span class="number">-2</span>d44<span class="number">-4489</span><span class="number">-86</span>f9<span class="number">-992</span>c9017cfe0</span><br><span class="line"><span class="string">router:</span><span class="string">external :</span> False</span><br><span class="line"><span class="string">availability_zone_hints :</span> []</span><br><span class="line"><span class="string">availability_zones :</span> []</span><br><span class="line"><span class="string">ipv4_address_scope :</span> None</span><br><span class="line"><span class="string">shared :</span> False</span><br><span class="line"><span class="string">project_id :</span> ebe0a369198a4b92b0f294ef22386756</span><br><span class="line"><span class="string">l2_adjacency :</span> True</span><br><span class="line"><span class="string">status :</span> ACTIVE</span><br><span class="line"><span class="string">subnets :</span> [u<span class="string">'f2bd3531-fb6a-49a4-b63d-d531f8575f2d'</span>]</span><br><span class="line"><span class="string">description :</span></span><br><span class="line"><span class="string">tags :</span> []</span><br><span class="line"><span class="string">updated_at :</span> <span class="number">2018</span><span class="number">-07</span><span class="number">-30</span><span class="string">T12:</span><span class="number">34</span>:<span class="number">27</span>Z</span><br><span class="line"><span class="string">provider:</span><span class="string">segmentation_id :</span> None</span><br><span class="line"><span class="string">name :</span> external</span><br><span class="line"><span class="string">admin_state_up :</span> False</span><br><span class="line"><span class="string">tenant_id :</span> ebe0a369198a4b92b0f294ef22386756</span><br><span class="line"><span class="string">created_at :</span> <span class="number">2018</span><span class="number">-07</span><span class="number">-30</span><span class="string">T12:</span><span class="number">34</span>:<span class="number">26</span>Z</span><br><span class="line"><span class="string">mtu :</span> <span class="number">1500</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;curl-使用&quot;&gt;&lt;a href=&quot;#curl-使用&quot; class=&quot;headerlink&quot; title=&quot;curl 使用&quot;&gt;&lt;/a&gt;curl 使用&lt;/h1&gt;&lt;p&gt;まずは OpenStack の環境変数を読み込む。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ~/overcloudrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次にユーザ名とパスワード、ドメイン名を指定し、トークンを取得する。&lt;br&gt;keystone で v2 を使用しているか v3 を使用しているかによって トークンの表示位置が変更するので注意が必要。&lt;br&gt;今回は、keysotne v3 を前提にしている。&lt;br&gt;
    
    </summary>
    
    
      <category term="OpenStack" scheme="http://haystacker.net/tags/OpenStack/"/>
    
  </entry>
  
</feed>
