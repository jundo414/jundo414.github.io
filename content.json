{"meta":{"title":"Haystacker","subtitle":null,"description":null,"author":"Hayato Otsuka","url":"http://haystacker.net"},"pages":[{"title":"page","date":"2018-09-08T03:41:48.000Z","updated":"2018-09-08T03:52:31.200Z","comments":true,"path":"index.html","permalink":"http://haystacker.net/index.html","excerpt":"","text":"top page"}],"posts":[{"title":"macでOSを自作 - Day1","slug":"create-os-day1","date":"2018-09-09T00:50:37.000Z","updated":"2018-09-09T04:32:40.048Z","comments":true,"path":"2018/09/09/create-os-day1/","link":"","permalink":"http://haystacker.net/2018/09/09/create-os-day1/","excerpt":"","text":"バイナリによる OS イメージの作成0xED ファイルを開き、以下のように入力後、helloos.img として保存する。（”55 AA F0 FF FF” 以降は 167FF2 までひたすら 0）1234567891011121314151617181920EB 4E 90 48 45 4C 4C 4F 49 50 4C 00 02 01 01 00 02 E0 00 40 0B F0 09 00 12 00 02 00 00 00 0000 40 0B 00 00 00 00 29 FF FF FF FF 48 45 4C 4C 4F 2D 4F 53 20 20 20 46 41 54 31 32 20 20 2000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B8 00 00 8E D0 BC 00 7C 8E D8 8E C0 BE74 7C 8A 04 83 C6 01 3C 00 74 09 B4 0E BB 0F 00 CD 10 EB EE F4 EB FD 0A 0A 68 65 6C 6C 6F 2C20 77 6F 72 6C 64 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 55 AA F0 FF FF 00 00 00 00 00 00 00 00 00 00 00 00(省略)00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 ..ほど気も長くないので、projects/01_day/helloos0/helloos.img をコピーして使い回しました f–; 今後のために Makefile を作成し、動作確認だけしておく。12run : qemu-system-x86_64 -drive format=raw,file=helloos.img 1$ make run アセンブラによる OS イメージの作成（その１）nasm 形式で OS イメージを作成する。12345678910111213141516171819202122DB 0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4fDB 0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00DB 0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00DB 0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00DB 0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xffDB 0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4fDB 0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41DB 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00TIMES 16 DB 0DB 0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7cDB 0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8aDB 0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09DB 0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xebDB 0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65DB 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72DB 0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00TIMES 368 DB 0DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaaDB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00TIMES 4600 DB 0DB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00TIMES 1469432 DB 0 DB 命令で、バイナリエディタで記述したものと同じ値を書き込んでおり、、“TIMES (繰り返し回数) DB 0” で指定した回数分 0 を書き込んでいる。 書籍のソースコードをベースに nasm 用に書き換えている箇所の差分は以下の通り。123456789101112(省略)- RESB 16+ TIMES 16 DB 0(省略)- RESB 368+ TIMES 368 DB 0(省略)- RESB 4600+ TIMES 4600 DB 0(省略)- RESB 1469432+ TIMES 1469432 DB 0 ついでに Makefile をビルドできるように以下の通り修正しておく。123456789101112131415IN_FILE = helloos.nasOUT_FILE = helloos.imgall: make build make runbuild: nasm $&#123;IN_FILE&#125; -o $&#123;OUT_FILE&#125;run : qemu-system-x86_64 -drive format=raw,file=$&#123;OUT_FILE&#125;clean: rm -f $&#123;OUT_FILE&#125; 以下のコマンドで HariboteOS が起動を確認する。1$ make all アセンブラによる OS イメージの作成（その２）./projects/01_day/helloos2/helloos.nas をベースに nasm 様に以下の通り書き換える。“0x1fe-$” のままだと nasm 書式の場合怒られるので、”0x1fe-($-$$)” として変更している。“$” は行頭の位置、”$$” はセクション開始位置を表しているので、”($-$$)” でセクション開始位置からの相対的な位置を意味している。123456789101112(省略)- RESB 18 ; とりあえず18バイトあけておく+ TIMES 18 DB 0 ; とりあえず18バイトあけておく(省略)- RESB 0x1fe-$ ; 0x001feまでを0x00で埋める命令+ TIMES 0x1fe-($-$$) DB 0 ; 0x001feまでを0x00で埋める命令(省略)- RESB 4600+ TIMES 4600 DB 0(省略)- RESB 1469432+ TIMES 1469432 DB 0 全文は以下の通りとなる。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950; hello-os; TAB=4; 以下は標準的なFAT12フォーマットフロッピーディスクのための記述 DB 0xeb, 0x4e, 0x90 DB &quot;HELLOIPL&quot; ; ブートセクタの名前を自由に書いてよい（8バイト） DW 512 ; 1セクタの大きさ（512にしなければいけない） DB 1 ; クラスタの大きさ（1セクタにしなければいけない） DW 1 ; FATがどこから始まるか（普通は1セクタ目からにする） DB 2 ; FATの個数（2にしなければいけない） DW 224 ; ルートディレクトリ領域の大きさ（普通は224エントリにする） DW 2880 ; このドライブの大きさ（2880セクタにしなければいけない） DB 0xf0 ; メディアのタイプ（0xf0にしなければいけない） DW 9 ; FAT領域の長さ（9セクタにしなければいけない） DW 18 ; 1トラックにいくつのセクタがあるか（18にしなければいけない） DW 2 ; ヘッドの数（2にしなければいけない） DD 0 ; パーティションを使ってないのでここは必ず0 DD 2880 ; このドライブ大きさをもう一度書く DB 0,0,0x29 ; よくわからないけどこの値にしておくといいらしい DD 0xffffffff ; たぶんボリュームシリアル番号 DB &quot;HELLO-OS &quot; ; ディスクの名前（11バイト） DB &quot;FAT12 &quot; ; フォーマットの名前（8バイト） TIMES 18 DB 0 ; とりあえず18バイトあけておく; プログラム本体 DB 0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c DB 0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a DB 0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09 DB 0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb DB 0xee, 0xf4, 0xeb, 0xfd; メッセージ部分 DB 0x0a, 0x0a ; 改行を2つ DB &quot;hello, world&quot; DB 0x0a ; 改行 DB 0 TIMES 0x1fe-($-$$) DB 0 ; 0x001feまでを0x00で埋める命令 DB 0x55, 0xaa; 以下はブートセクタ以外の部分の記述 DB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 TIMES 4600 DB 0 DB 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 TIMES 1469432 DB 0 細かいルールや根拠的なものはまだわからないが、「アセンブラによる OS イメージの作成（その１）」のコードを比較すると、一部のコードが日本語や10進数で書かれることでかなり見やすいものになっている。","categories":[],"tags":[{"name":"OS","slug":"OS","permalink":"http://haystacker.net/tags/OS/"}]},{"title":"macでOSを自作 - Day0","slug":"create-os-day0","date":"2018-09-08T06:40:20.000Z","updated":"2018-09-08T08:25:17.584Z","comments":true,"path":"2018/09/08/create-os-day0/","link":"","permalink":"http://haystacker.net/2018/09/08/create-os-day0/","excerpt":"","text":"目的書籍「30日でできる！OS自作入門」を参考に OS を自作し、OS の仕組みを学習する。この書籍では、Windows OS やフロッピーディスクを前提に記述されているが、mac で実行できるよう適宜内容を変更して実施する。また、書籍内で使用されている著者の独自スクリプトやコマンドも使用せず、汎用的なものをなるべく使用するようにする。 概要Day0 では、mac で OS を自作するための環境構築手順について説明していく。 資材の配置HariboteOSという名前のディレクトリをホームディレクトリに作成する。1$ mkdir ~/HariboteOS 下記のサポートサイトより、HariboteOS.zip をダウンロードし、解凍する。 https://book.mynavi.jp/supportsite/detail/4839919844.html 解凍された HariboteOS.iso をマウントし、projects ディレクトリを ~/HariboteOS ディレクトリ配下にコピーする。projects ディレクトリには、書籍に掲載されているソースコードがセクション毎に格納されている。 qemu のインストールbrew で qemu をインストールする。1$ brew install qemu qemu のバージョンを確認する。123$ qemu-system-i386 -versionQQEMU emulator version 3.0.0Copyright (c) 2003-2017 Fabrice Bellard and the QEMU Project developers qemu を使用し、HariboteOS を実行をし、正常に動作するか確認する。12$ cd ~/HariboteOS/projects/01_day/helloos0$ qemu-system-x86_64 -drive format=raw,file=helloos.img プロンプトが開き、”hello, world” と表示されていれば問題ないので、プロンプトを閉じる。 バイナリエディタ(0xED) のインストール以下のサイトから 0xED をダウンロード後、解凍し、0xED.app ファイルをアプリケーションディレクトリへコピーしておく。 http://www.suavetech.com/0xed/0xed.html nasm のインストールアセンブラのプログラミングで使用する nasm をインストールする。1$ brew install nasm nasm のバージョン情報が表示されれば問題ない。12$ nasm -vNASM version 0.98.40 (Apple Computer, Inc. build 11) compiled on Jun 4 2018 gdb のインストールデバッグ用途で使用する gdb もインストールしておく。1$ brew install gdb 正常にインストールされていれば、gdb のバージョン情報が表示される。123456789101112131415$ gdb --versionGNU gdb (GDB) 8.1.1Copyright (C) 2018 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. Type &quot;show copying&quot;and &quot;show warranty&quot; for details.This GDB was configured as &quot;x86_64-apple-darwin17.7.0&quot;.Type &quot;show configuration&quot; for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at:&lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type &quot;help&quot;.Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;. 参考URL 「30日でできる！ OS自作入門」サポートページ https://book.mynavi.jp/supportsite/detail/4839919844.html http://hrb.osask.jp/ バイナリエディタ(0xED)配布サイト http://www.suavetech.com/0xed/0xed.html","categories":[],"tags":[{"name":"OS","slug":"OS","permalink":"http://haystacker.net/tags/OS/"}]},{"title":"OpenStack API 実装例","slug":"howto-use-openstack-api","date":"2018-09-08T03:05:27.000Z","updated":"2018-09-08T08:25:36.519Z","comments":true,"path":"2018/09/08/howto-use-openstack-api/","link":"","permalink":"http://haystacker.net/2018/09/08/howto-use-openstack-api/","excerpt":"","text":"curl 使用まずは OpenStack の環境変数を読み込む。 1source ~/overcloudrc 次にユーザ名とパスワード、ドメイン名を指定し、トークンを取得する。keystone で v2 を使用しているか v3 を使用しているかによって トークンの表示位置が変更するので注意が必要。今回は、keysotne v3 を前提にしている。 1token=$(curl -i -s -X POST -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;auth&quot;: &#123;&quot;identity&quot;: &#123;&quot;methods&quot;: [&quot;&apos;$&#123;OS_AUTH_TYPE&#125;&apos;&quot;], &quot;password&quot;: &#123;&quot;user&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_USERNAME&#125;&apos;&quot;, &quot;password&quot;: &quot;&apos;$&#123;OS_PASSWORD&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;, &quot;scope&quot;: &#123;&quot;project&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_NAME&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;&#125;&apos; $&#123;OS_AUTH_URL&#125;/auth/tokens?nocatalog | grep &quot;X-Subject-Token&quot; | cut -d&quot; &quot; -f2) あとは、先ほど取得したトークンを “X-Auth-Token” にセットして、API を発行すれば OK。 1curl -i -s -X PUT $&#123;nova_endpoint&#125;/$&#123;project_id&#125;/os-services/force-down -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json &quot; -H &quot;X-OpenStack-Nova-API-Version: 2.11&quot; -H &quot;X-Auth-Token: $&#123;token&#125;&quot; -d &apos;&#123;&quot;binary&quot;: &quot;nova-compute&quot;, &quot;host&quot;: &quot;&apos;$&#123;target&#125;&apos;&quot;, &quot;forced_down&quot;: &apos;$&#123;forcedown&#125;&apos;&#125;&apos; コード全文は以下の通りとなる。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162function help() &#123; echo &quot;usage: $&#123;0##*/&#125; &lt;target&gt; &lt;action&gt;&quot; echo &quot;usage: $&#123;0##*/&#125; [--help]&quot; echo &quot;&quot; echo &quot;Positional arguments:&quot; echo &quot; &lt;target&gt; Computer name that you want to do force-down.&quot; echo &quot; &lt;action&gt; true(set force-down) or false(unset force-down)&quot; echo &quot;&quot; echo &quot;Optional arguments:&quot; echo &quot; --help Display help menu.&quot;&#125;while getopts &quot;:vh-:&quot; opt; do case &quot;$opt&quot; in -) case &quot;$&#123;OPTARG&#125;&quot; in help) help exit 0 ;; esac ;; esacdoneif [ $# -ne 2 ]; then help echo &quot;&quot; echo &quot;[ERROR] Set the correct number of arguments. (require: 2, input: $#)&quot; exit 1else target=$1 case &quot;$2&quot; in &quot;true&quot; | &quot;false&quot; ) forcedown=$2 ;; * ) help echo &quot;&quot; echo &quot;[ERROR] Please set &apos;true&apos; or &apos;false&apos; as 2nd arguments.&quot; exit 1 ;; esacfisource ~/overcloudrcproject_id=`openstack project list | grep &quot; $&#123;OS_PROJECT_NAME&#125; &quot; | cut -d&quot; &quot; -f2`nova_endpoint=`openstack endpoint list | grep &quot; compute &quot; | grep &quot; public &quot; | cut -d&quot;|&quot; -f8 | sed -e &quot;s/ //g&quot;`token=$(curl -i -s -X POST -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;auth&quot;: &#123;&quot;identity&quot;: &#123;&quot;methods&quot;: [&quot;&apos;$&#123;OS_AUTH_TYPE&#125;&apos;&quot;], &quot;password&quot;: &#123;&quot;user&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_USERNAME&#125;&apos;&quot;, &quot;password&quot;: &quot;&apos;$&#123;OS_PASSWORD&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;, &quot;scope&quot;: &#123;&quot;project&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_NAME&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;&#125;&apos; $&#123;OS_AUTH_URL&#125;/auth/tokens?nocatalog | grep &quot;X-Subject-Token&quot; | cut -d&quot; &quot; -f2)token=`echo $&#123;token&#125; | sed -e &quot;s/[\\r\\n]\\+//g&quot;`curl -i -s -X PUT $&#123;nova_endpoint&#125;/$&#123;project_id&#125;/os-services/force-down -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json &quot; -H &quot;X-OpenStack-Nova-API-Version: 2.11&quot; -H &quot;X-Auth-Token: $&#123;token&#125;&quot; -d &apos;&#123;&quot;binary&quot;: &quot;nova-compute&quot;, &quot;host&quot;: &quot;&apos;$&#123;target&#125;&apos;&quot;, &quot;forced_down&quot;: &apos;$&#123;forcedown&#125;&apos;&#125;&apos; &gt;/dev/nullif [ $? -eq 0 ]; then echo &quot;[INFO] force-down was finished successfully&quot;else echo &quot;[ERROR] force-down was failed.&quot;finova hypervisor-list 実行すると以下のように出力される。 12345678910$ ./api_nova_forcedown.sh --helpusage: api_nova_forcedown.sh &lt;target&gt; &lt;action&gt;usage: api_nova_forcedown.sh [--help]Positional arguments: &lt;target&gt; Computer name that you want to do force-down. &lt;action&gt; true(set force-down) or false(unset force-down)Optional arguments: --help Display help menu. 12345678$ sh ./api_nova_forcedown.sh jfc-cmp01.nttdata.co.jp true[INFO] force-down was finished successfully+--------------------------------------+-------------------------+-------+---------+| ID | Hypervisor hostname | State | Status |+--------------------------------------+-------------------------+-------+---------+| 1ff4b167-87c0-409b-87e9-298be57c6e11 | jfc-cmp02.nttdata.co.jp | up | enabled || d40ee745-18e6-43f6-b605-04ac6bb32972 | jfc-cmp01.nttdata.co.jp | down | enabled |+--------------------------------------+-------------------------+-------+---------+ 12345678$ sh ./api_nova_forcedown.sh jfc-cmp01.nttdata.co.jp false[INFO] force-down was finished successfully+--------------------------------------+-------------------------+-------+---------+| ID | Hypervisor hostname | State | Status |+--------------------------------------+-------------------------+-------+---------+| 1ff4b167-87c0-409b-87e9-298be57c6e11 | jfc-cmp02.nttdata.co.jp | up | enabled || d40ee745-18e6-43f6-b605-04ac6bb32972 | jfc-cmp01.nttdata.co.jp | up | enabled |+--------------------------------------+-------------------------+-------+---------+ Python SDK 使用curl を使用するケースと同様、こちらも keystone v2 と v3 で実装が若干異なってくるが、今回は v3 を前提に話を進める。 まずは OpenStack の環境変数を読み込む。 1source ~/overcloudrc 次に認証情報をもとにセッションを確立する。12345678v3_auth = v3.Password(auth_url=os_auth_url, username=os.environ[&apos;OS_USERNAME&apos;], password=os.environ[&apos;OS_PASSWORD&apos;], project_name=os.environ[&apos;OS_PROJECT_NAME&apos;], project_domain_name=os.environ[&apos;OS_PROJECT_DOMAIN_NAME&apos;], user_domain_name=os.environ[&apos;OS_USER_DOMAIN_NAME&apos;])sess = session.Session(auth=v3_auth, verify=False) Nova API を使用する場合、最初に Nova Client のインスタンスを生成する。12import novaclient.clientn_sess = novaclient.client.Client(2, session=sess) 任意の Nova API を実行し、結果を “result” に格納する。1result = n_sess.servers.list() 最後に “result” の値を出力する。12for r in result: print r.id, r.name; コード全文は以下の通り。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import osimport loggingfrom keystoneauth1.identity import v3from keystoneauth1 import sessionimport requestsclass Sample: def __init__(self): requests.packages.urllib3.disable_warnings() logging.basicConfig(level=logging.INFO) self.logger = logging.getLogger(__name__) def authorization(self): if os.environ.get(&apos;http_proxy&apos;) or os.environ.get(&apos;https_proxy&apos;): self.logger.WARN(&quot;Proxy env vars set&quot;) os_auth_url = os.environ[&apos;OS_AUTH_URL&apos;] os_auth_url = os_auth_url.replace(&apos;v2.0&apos;, &apos;v3&apos;) if not os_auth_url.endswith(&apos;v3&apos;): os_auth_url += &apos;/v3&apos; v3_auth = v3.Password(auth_url=os_auth_url, username=os.environ[&apos;OS_USERNAME&apos;], password=os.environ[&apos;OS_PASSWORD&apos;], project_name=os.environ[&apos;OS_PROJECT_NAME&apos;], project_domain_name=os.environ[&apos;OS_PROJECT_DOMAIN_NAME&apos;], user_domain_name=os.environ[&apos;OS_USER_DOMAIN_NAME&apos;]) k_sess = session.Session(auth=v3_auth, verify=False) return k_sess def nova_sess(self): import novaclient.client sess = self.authorization() n_sess = novaclient.client.Client(2, session=sess) return n_sess def nova_list(self): n_sess = self.nova_sess() result = n_sess.servers.list() for r in result: print r.id, r.name; def neutron_sess(self): import neutronclient.neutron.client sess = self.authorization() q_sess = neutronclient.neutron.client.Client(&apos;2.0&apos;, session=sess) return q_sess def neutron_list(self): q_sess = self.neutron_sess() result = q_sess.list_networks()[&apos;networks&apos;] for r in result: for k, v in r.items(): print(&quot;%s : %s&quot; % (k, v)) print(&apos;\\n&apos;)s = Sample()s.nova_list()s.neutron_list() 実行すると以下の通り出力される。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555603116438-bd19-4452-8339-cd992c50d156 jfc-cmp02988877da-17eb-4a07-a610-ccab64eac23a jfc-ctr0171d4cc92-9ab4-4678-bd53-b2c03ebe943e jfc-ctr0209ae722c-8e05-4a02-ad86-dbe7b2232775 jfc-cmp013a416f50-9ea2-48f5-9168-447cda1c4f15 jfc-ctr03provider:physical_network : ctlplaneipv6_address_scope : Nonerevision_number : 8port_security_enabled : Trueprovider:network_type : flatid : 515ab5ab-e73c-428b-b145-4f9b89fac431router:external : Falseavailability_zone_hints : []availability_zones : [u&apos;nova&apos;]ipv4_address_scope : Noneshared : Falseproject_id : ebe0a369198a4b92b0f294ef22386756l2_adjacency : Truestatus : ACTIVEsubnets : [u&apos;a2509cf3-fb5e-4714-8820-1b94283ccdf7&apos;]description :tags : []updated_at : 2018-07-27T10:47:42Zprovider:segmentation_id : Nonename : ctlplaneadmin_state_up : Truetenant_id : ebe0a369198a4b92b0f294ef22386756created_at : 2018-07-27T07:37:22Zmtu : 1500provider:physical_network : externalipv6_address_scope : Nonerevision_number : 3port_security_enabled : Trueprovider:network_type : flatid : 91c89b6a-2d44-4489-86f9-992c9017cfe0router:external : Falseavailability_zone_hints : []availability_zones : []ipv4_address_scope : Noneshared : Falseproject_id : ebe0a369198a4b92b0f294ef22386756l2_adjacency : Truestatus : ACTIVEsubnets : [u&apos;f2bd3531-fb6a-49a4-b63d-d531f8575f2d&apos;]description :tags : []updated_at : 2018-07-30T12:34:27Zprovider:segmentation_id : Nonename : externaladmin_state_up : Falsetenant_id : ebe0a369198a4b92b0f294ef22386756created_at : 2018-07-30T12:34:26Zmtu : 1500...","categories":[],"tags":[{"name":"OpenStack","slug":"OpenStack","permalink":"http://haystacker.net/tags/OpenStack/"}]}]}