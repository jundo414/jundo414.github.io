{"meta":{"title":"HayStacker","subtitle":null,"description":null,"author":"Hayato Otsuka","url":"http://haystacker.net"},"pages":[{"title":"404 - Page Not Found","date":"2018-09-25T18:11:11.000Z","updated":"2018-09-25T18:29:35.315Z","comments":true,"path":"404.html","permalink":"http://haystacker.net/404.html","excerpt":"","text":"お探しのページは見つかりませんでした。 [トップページ]","raw":null,"content":null},{"title":"page","date":"2018-09-08T03:41:48.000Z","updated":"2018-09-08T03:52:31.200Z","comments":true,"path":"index.html","permalink":"http://haystacker.net/index.html","excerpt":"","text":"top page","raw":null,"content":null}],"posts":[{"title":"[徹底解説] Linux パイプのしくみ","slug":"linux-pipe-deep-dive","date":"2018-10-08T22:13:51.000Z","updated":"2019-01-20T04:55:34.794Z","comments":true,"path":"linux-pipe-deep-dive/","link":"","permalink":"http://haystacker.net/linux-pipe-deep-dive/","excerpt":"","text":"パイプは、1970年初頭に Third Edition Unix で実装された、Unix の IPC (Interprocess Communication / プロセス間通信) 。パイプは、関連プロセス間でデータの受け渡しを行い、異なるプログラムを実行する2プロセスにおいて、一方の出力をもう一方の入力とすることができる。 概要パイプは以下のように使用される。# ls / | wc -l22 この例の場合、以下のように順に処理されている。 ls / コマンドで対象ファイルの一覧を表示する。 bin dev home lib64 mnt proc run srv tmp vagrant workboot etc lib media opt root sbin sys usr var 前の出力結果を入力値として、wc -l を実行して出力ライン数をカウント・表示する。 22 パイプの実装カーネルにおけてパイプは以下のように実装されている。 パイプはファイルシステム上に実態を持たないが、 inode 構造体などの管理構造を維持する必要があるため、pipefs という仮想ファイルシステム (VFS) を導入している pipefs ファイルシステムは、システムのディレクトリツリーにマウントポイントを持っていないため、ユーザから見ることはできない pipefs のエントリポイントは、シェルや他のプログラムでパイプを実装するために使用される pipe(2) システムコール pipe(2) は新しいパイプを作成し、ファイルディスクリプターを二つ返す（ディスクリプターのうち、一方はパイプの読み出し側を、もう一方は 書き込み側を参照している） パイプ I/O、バッファリング、容量Linux ではパイプの容量が限られており、パイプの容量がフルになると write(2)がブロックされる（O_NONBLOCK フラグがセットされている場合は失敗する）。Linux 2.6.35 以降、デフォルトのパイプ容量は 65,536 バイト、それ以前のバージョンでは、パイプの容量はシステムのページサイズと同一（例えば i386 の場合は 4,096 バイト）となっている。 プロセスが空のパイプからの読み取りを試みた際、read(2) はデータがパイプ内で利用可能になるまでブロックする。パイプの書き込み側を指すファイルディスクリプタがすべて閉じられた場合、パイプから読み取りを試みると EOF が返される（read(2) が 0 を返す）。 プロセスがフルになったパイプに書き込もうとすると、write 呼び出しが成功するのに十分なデータがパイプから読み取られるまで、write(2) はブロックされる。パイプの読み込み側のファイルディスクリプタがすべて閉じられると、パイプに書き込んだ際に SIGPIPE シグナルが送られる。呼び出し元のプロセスがこのこのシグナルを無視している場合、write(2) はエラー EPIPE で失敗する。 つまり、プロセスAからの書き込みと、プロセスBからの読み込みが同じ速度で行われている場合は、最大のパフォーマンスを出すことができるが、速度が乖離している場合には、パフォーマンス劣化を引き起こす場合があるので、注意が必要となる。 シェルでパイプを行う方法ここからは、Linux においてプロセスがどのように生成されるのかについて、理解していることを前提として説明をしていく。ご存知でない方は “[徹底解説] Linux プロセス生成のしくみ” を参照のこと。 シェルは、「リダイレクションの実装方法」と非常によく似た方法でパイプを実装します。基本的には、親プロセスは、一緒にパイプ処理される2つのプロセスごとに、 pipe(2) を1回呼び出します。上記の例では、bash は2つのパイプを作成するために pipe(2) を2回呼び出す必要があります。次に、bash はプロセスごとに1回ずつフォークします（この例では3回）。各子は1つのコマンドを実行します。しかし、子供がコマンドを実行する前に、stdin または stdout（またはその両方）を上書きします。上記の例では、次のように動作します。 bash は2つのパイプを作成します.1つはソートするパイプ、もう1つはソートするパイプです bash は自分自身を3回フォークします（各コマンドごとに1つの親プロセスと3つの子プロセス） 子1 (ls) は、標準出力ファイル記述子をパイプ A の書き込み終了に設定します 子2 (sort) は、パイプ A の読み込み側のファイルディスクリプタを stdin に設定します（ls からの入力を読み込むため） 子2 (sort) は、標準出力ファイル記述子をパイプBの書込み終了に設定します 子3 (less) は、パイプ B の読み込み側のファイルディスクリプタを stdin に設定します（sort からの入力を読み込むため） それぞれの子はコマンドを実行する カーネルはプロセスを自動的にスケジューリングして、大まかに並行して実行します。子2がそれを読み取る前に子1がパイプAにあまりにも多くの書き込みを行った場合、子2はパイプから読み出すまでの間、しばらくブロックします。これは通常、あるプロセスが他のプロセスがデータの処理を開始するのを待つ必要がないため、非常に高いレベルの効率を可能にします。もう1つの理由は、パイプのサイズが限られていることです（通常、メモリの1ページのサイズ）。 パイプサンプルコードここでは、bash のようなプログラムがパイプを実装する方法の C の例を示します。私の例はかなりシンプルで、2つの引数を受け取ります。ディレクトリと検索する文字列です。ls -la を実行してディレクトリの内容を取得し、grep にパイプして文字列を検索します。 #include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;errno.h&gt;#include &lt;fcntl.h&gt;#define READ_END 0#define WRITE_END 1int main(int argc, char *argv[])&#123; int pid, pid_ls, pid_grep; int pipefd[2]; // Syntax: test . filename if (argc &lt; 3) &#123; fprintf(stderr, \"Please specify the directory to search and the filename to search for\\n\"); return -1; &#125; fprintf(stdout, \"parent: Grepping %s for %s\\n\", argv[1], argv[2]); // Create an unnamed pipe if (pipe(pipefd) == -1) &#123; fprintf(stderr, \"parent: Failed to create pipe\\n\"); return -1; &#125; // Fork a process to run grep pid_grep = fork(); if (pid_grep == -1) &#123; fprintf(stderr, \"parent: Could not fork process to run grep\\n\"); return -1; &#125; else if (pid_grep == 0) &#123; fprintf(stdout, \"child: grep child will now run\\n\"); // Set fd[0] (stdin) to the read end of the pipe if (dup2(pipefd[READ_END], STDIN_FILENO) == -1) &#123; fprintf(stderr, \"child: grep dup2 failed\\n\"); return -1; &#125; // Close the pipe now that we've duplicated it close(pipefd[READ_END]); close(pipefd[WRITE_END]); // Setup the arguments/environment to call char *new_argv[] = &#123; \"/bin/grep\", argv[2], 0 &#125;; char *envp[] = &#123; \"HOME=/\", \"PATH=/bin:/usr/bin\", \"USER=brandon\", 0 &#125;; // Call execve(2) which will replace the executable image of this // process execve(new_argv[0], &amp;new_argv[0], envp); // Execution will never continue in this process unless execve returns // because of an error fprintf(stderr, \"child: Oops, grep failed!\\n\"); return -1; &#125; // Fork a process to run ls pid_ls = fork(); if (pid_ls == -1) &#123; fprintf(stderr, \"parent: Could not fork process to run ls\\n\"); return -1; &#125; else if (pid_ls == 0) &#123; fprintf(stdout, \"child: ls child will now run\\n\"); fprintf(stdout, \"---------------------\\n\"); // Set fd[1] (stdout) to the write end of the pipe if (dup2(pipefd[WRITE_END], STDOUT_FILENO) == -1) &#123; fprintf(stderr, \"ls dup2 failed\\n\"); return -1; &#125; // Close the pipe now that we've duplicated it close(pipefd[READ_END]); close(pipefd[WRITE_END]); // Setup the arguments/environment to call char *new_argv[] = &#123; \"/bin/ls\", \"-la\", argv[1], 0 &#125;; char *envp[] = &#123; \"HOME=/\", \"PATH=/bin:/usr/bin\", \"USER=brandon\", 0 &#125;; // Call execve(2) which will replace the executable image of this // process execve(new_argv[0], &amp;new_argv[0], envp); // Execution will never continue in this process unless execve returns // because of an error fprintf(stderr, \"child: Oops, ls failed!\\n\"); return -1; &#125; // Parent doesn't need the pipes close(pipefd[READ_END]); close(pipefd[WRITE_END]); fprintf(stdout, \"parent: Parent will now wait for children to finish execution\\n\"); // Wait for all children to finish while (wait(NULL) &gt; 0); fprintf(stdout, \"---------------------\\n\"); fprintf(stdout, \"parent: Children has finished execution, parent is done\\n\"); return 0;&#125; 私はそれを徹底的にコメントしたので、うまくいけば意味がある。 名前付きパイプと無名パイプ上記の例では、名前のない/匿名のパイプを使用しています。これらのパイプは一時的なもので、プログラムが終了するか、ファイル記述子がすべて閉じられると破棄されます。それらは最も一般的なタイプのパイプです。 名前付きパイプは、FIFO (first in, first out) としても知られ、ハードディスク上の名前付きファイルとして作成されます。無関係な複数のプログラムを開いて使用することができます。非常にシンプルなクライアント/サーバー型設計のために、複数のライターを1つのリーダーで簡単に作成できます。たとえば、Nagios はこれを行います。マスタープロセスは名前付きパイプを読み込み、すべての子プロセスは名前付きパイプにコマンドを書き込みます。 名前付きパイプは、mkfifo コマンドまたは syscall を使用して作成しています。例：$ mkfifo ~/test_pipe 彼らの作成以外にも、名前のないパイプとほとんど同じ働きをします。作成したら、 open(2) を使って開くことができます。O_RDONLY を使って読み込み終了を開くか、O_WRONLY を使って書き込み終了をオープンする必要があります。ほとんどのオペレーティングシステムでは単方向パイプが実装されているため、読み取り/書き込みモードで開くことはできません。 FIFO は、複数のプロセスを持つシステムのために、単方向 IPC 技術としてしばしば使用されます。マルチスレッドアプリケーションは、共有メモリセグメントなどの他の IPC 技術と同様に、名前付きパイプまたは名前のないパイプを使用することもできます。 FIFO は inode として作成され、i_pipe プロパティは実際のパイプへの参照として設定されます。名前がファイルシステム上に存在するかもしれませんが、inode が読み込まれると、パイプは無名のパイプのように振る舞い、メモリ内で動作するため、パイプは基盤となるデバイスへの I/O を引き起こしません。 参考 URL How Linux pipes work under the hood https://brandonwamboldt.ca/how-linux-pipes-work-under-the-hood-1518/","raw":null,"content":null,"categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://haystacker.net/tags/Linux/"}]},{"title":"[徹底解説] Linux リダイレクトのしくみ","slug":"linux-redirect-deep-dive","date":"2018-10-07T20:54:07.000Z","updated":"2018-11-05T17:42:18.899Z","comments":true,"path":"linux-redirect-deep-dive/","link":"","permalink":"http://haystacker.net/linux-redirect-deep-dive/","excerpt":"","text":"フードの中で bash リダイレクションがどのように機能するのか疑問に思ったことはありますか？リダイレクト自体はかなり簡単です。 bash を使うと、ファイルをプロセスの stdin にリダイレクトすることも、プロセスの stdout/stderr をファイルや他のファイル記述子にリダイレクトすることもできます（ stderr を stdout にリダイレクトするなど、ファイル記述子なので）。 リダイレクトは次のようになります。$ ls -la &gt; output.txt 上記のコマンドは、stdout を ls コマンドから output.txt ファイルにリダイレクトします。stderr をリダイレクトする方法は次のとおりです。$ ls -la 2 &gt; errors.txt これにより、stderr から errors.txt にすべてが送信されます（許可が拒否されたメッセージなど）。そのため、たとえば次のような場合は、$ ls /root &gt; /dev/null ルート以外のユーザーは、出力を /dev/null にリダイレクトしたにもかかわらずエラーメッセージが表示されます。通常、エラーは stderr に書き込まれます。 最後に、stdin を出力とするファイルの入力リダイレクションを行うこともできます。$ bash &lt; commands.txt 上記のコマンドは、commands.txt の内容を読み込み、bash インタプリタを使用してそれらを実行します。 リダイレクトの実装とにかく、この記事のポイントは、そのような機能がどのように実装されているかです。プロセスフォークを理解すれば、非常に簡単になることが分かります。 プロセスが別のプロセス（例えば bash を実行しているls）を実行したいとき、それは一般的に次のように動作します： メインプロセス（bash など）は、fork という glibc ラッパーを使って fork します（sidenode: fork では、実際には fork(2) システムコールではなく glibc ラッパーを呼び出しています）。glibc ラッパーは、clone(2) がより強力であるため、fork(2) のシステムコールではなく、システムコール（syscall） fork されたプロセスは、出力リダイレクトがコマンドラインで入力されたことを確認し、open(2) のシステムコールまたは同等のものを使用して指定されたファイルを開きます。 fork されたプロセスは dup2 を呼び出して、新しく開かれたファイル記述子を stdin/stdout/stderr にコピーします。 fork されたプロセスは元のファイルハンドラを閉じて、リソースリークを防ぎます。 fork されたプロセスは execve(2) のシステムコールまたは同様のものを呼び出して、実行可能なイメージを実行するプロセスのイメージ（たとえば ls）に置き換えるか、 同じことをするコード例を次に示します。 #include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;fcntl.h&gt;int main(void)&#123; char *argv[] = &#123; \"/bin/ls\", \"-la\", 0 &#125;; char *envp[] = &#123; \"HOME=/\", \"PATH=/bin:/usr/bin\", \"USER=brandon\", 0 &#125;; int fd = open(\"/home/brandon/ls.log\", O_WRONLY|O_CREAT|O_TRUNC, 0666); dup2(fd, 1); // stdout is file descriptor 1 close(fd); execve(argv[0], &amp;argv[0], envp); fprintf(stderr, \"Oops!\\n\"); return -1;&#125; 上記のコードは stdout を ls.log に設定し、 ls -la を実行します。execve が失敗しない限り、fprintf 以下は実行されませんのでご注意ください。それで、リダイレクトが bash でどのように実装されるのです！ 2247 execve(\"./redirect\", [\"./redirect\"], [/* 18 vars */]) = 0 2247 open(\"/home/vagrant/ls.log\", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3 2247 dup2(3, 1) = 1 2247 execve(\"/bin/ls\", [\"/bin/ls\", \"-la\"], [/* 3 vars */]) = 0 2247 write(1, \"total 64\\ndrwxrwxrwx 2 root ro\"..., 620) = 620 2247 exit_group(0) = ?2247 +++ exited with 0 +++ /usr/include/unistd.h/* Standard file descriptors. */#define STDIN_FILENO 0 /* Standard input. */#define STDOUT_FILENO 1 /* Standard output. */#define STDERR_FILENO 2 /* Standard error output. */ # whoroot pts/0 2018-10-07 20:10 (10.16.0.1)root pts/1 2018-10-08 07:54 (10.16.0.1) # tty/dev/pts/0","raw":null,"content":null,"categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://haystacker.net/tags/Linux/"}]},{"title":"[徹底解説] Linux プロセス生成のしくみ","slug":"linux-process-creation-deep-dive","date":"2018-10-06T22:53:08.000Z","updated":"2019-01-20T04:56:28.271Z","comments":true,"path":"linux-process-creation-deep-dive/","link":"","permalink":"http://haystacker.net/linux-process-creation-deep-dive/","excerpt":"","text":"Linux においてプロセスは、fork(2) および clone(2) システムコールを使用することにより生成された後、exec(2) システムコールを使用して新規プログラムが実行される。 まずは、実際のプロセス生成を模擬した以下のサンプルプログラムを実行し、プロセス生成のしくみについて理解を深めていく。#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;fcntl.h&gt;int main(void)&#123; int pid = fork(); if (pid == -1) &#123; fprintf(stderr, \"プロセスの複製に失敗しました。\\n\"); return -1; &#125; else if (pid == 0) &#123; // 子プロセスの場合 fprintf(stdout, \"ls コマンド実行のための子プロセス生成 (PID: %d)\\n\", getpid()); // システムコールするため、引数および環境変数を設定 char *argv[] = &#123; \"/bin/ls\", \"-la\", 0 &#125;; char *envp[] = &#123; \"HOME=/\", \"PATH=/bin:/usr/bin\", \"USER=brandon\", 0 &#125;; // execve(2) システムコールにより、プロセスを実行可能イメージに置き換える execve(argv[0], &amp;argv[0], envp); // execve(2) からのリターンがない場合は異常終了 fprintf(stderr, \"エラーが発生しました。\\n\"); return -1; &#125; else if (pid &gt; 0) &#123; // 親プロセスの場合 int status; fprintf(stdout, \"親プロセスは子プロセスの実行完了するまで待機 (PID: %d)\\n\", getpid()); wait(&amp;status); fprintf(stdout, \"子プロセスの実行完了 (リターンコード: %i)、および親プロセスの終了\\n\", status); &#125; return 0;&#125; サンプルコードを実行すると以下のような出力を得られる。この出力結果より、まず、子プロセスが生成され、親プロセスは子プロセス完了を待機し、子プロセスの処理終了を受けて親プロセスが終了していることがわかる。 $ gcc -o fork_exec fork_exec.c$ strace -o /tmp/fork_exec.log -f ./fork_exec親プロセスは子プロセスの実行完了するまで待機 (PID: 18040)ls コマンド実行のための子プロセス生成 (PID: 18041)total 16drwxr-xr-x 2 root root 40 Oct 7 21:30 .drwxr-xr-x 3 root root 19 Oct 7 21:23 ..-rwxr-xr-x 1 root root 8792 Oct 7 21:25 fork_exec-rw-r--r-- 1 root root 1181 Oct 7 21:25 fork_exec.c子プロセスの実行完了 (リターンコード: 0)、および親プロセスの終了 strace の出力ファイルを参照すると、より詳細な内容を把握することができる。 親プロセスから子プロセスをクローン 18040 clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fb6cbfeaa10) = 18041 親プロセスは子プロセスの実行が完了するまで待機 // \"親プロセスは子プロセスの実行完了するまで待機 (PID: 18040)\"18040 wait4(-1, &lt;unfinished ...&gt; 子プロセスが execve() によって実行可能状態に遷移 // \"ls コマンド実行のための子プロセス生成 (PID: 18041)\"18041 execve(\"/bin/ls\", [\"/bin/ls\", \"-la\"], [/* 3 vars */]) = 0 ls コマンドの実行・表示 // \"total 16\"// \"drwxr-xr-x 2 root root 40 Oct 7 21:30 .\"// \"drwxr-xr-x 3 root root 19 Oct 7 21:23 ..\"// \"-rwxr-xr-x 1 root root 8792 Oct 7 21:25 fork_exec\"// \"-rw-r--r-- 1 root root 1181 Oct 7 21:25 fork_exec.c\" 子プロセスの終了 (リターンコード: 0) 18041 exit_group(0) = ?18041 +++ exited with 0 +++ 親プロセスで子プロセスの終了を受理・処理の再開 18040 &lt;... wait4 resumed&gt; [&#123;WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 0&#125;], 0, NULL) = 18041...18040 --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=18041, si_uid=0, si_status=0, si_utime=0, si_stime=0&#125; ---...// \"子プロセスの実行完了 (リターンコード: 0)、および親プロセスの終了\" 親プロセスの終了 (リターンコード: 0) 18040 exit_group(0) = ?18040 +++ exited with 0 +++","raw":null,"content":null,"categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://haystacker.net/tags/Linux/"}]},{"title":"OpenStack API 実装例","slug":"howto-use-openstack-api","date":"2018-09-08T03:05:27.000Z","updated":"2018-09-26T14:17:26.823Z","comments":true,"path":"howto-use-openstack-api/","link":"","permalink":"http://haystacker.net/howto-use-openstack-api/","excerpt":"curl 使用まずは OpenStack の環境変数を読み込む。\nsource ~/overcloudrc\n次にユーザ名とパスワード、ドメイン名を指定し、トークンを取得する。keystone で v2 を使用しているか v3 を使用しているかによって トークンの表示位置が変更するので注意が必要。今回は、keysotne v3 を前提にしている。","text":"curl 使用まずは OpenStack の環境変数を読み込む。 source ~/overcloudrc 次にユーザ名とパスワード、ドメイン名を指定し、トークンを取得する。keystone で v2 を使用しているか v3 を使用しているかによって トークンの表示位置が変更するので注意が必要。今回は、keysotne v3 を前提にしている。token=$(curl -i -s -X POST -H 'Content-Type: application/json' \\-d '&#123;\"auth\": &#123;\"identity\": &#123;\"methods\": [\"'$&#123;OS_AUTH_TYPE&#125;'\"], \"password\": &#123;\"user\": &#123;\"name\": \"'$&#123;OS_USERNAME&#125;'\", \"password\": \"'$&#123;OS_PASSWORD&#125;'\", \"domain\": &#123;\"name\": \"'$&#123;OS_PROJECT_DOMAIN_NAME&#125;'\"&#125;&#125;&#125;&#125;, \"scope\": &#123;\"project\": &#123;\"name\": \"'$&#123;OS_PROJECT_NAME&#125;'\", \"domain\": &#123;\"name\": \"'$&#123;OS_PROJECT_DOMAIN_NAME&#125;'\"&#125;&#125;&#125;&#125;&#125;' \\$&#123;OS_AUTH_URL&#125;/auth/tokens?nocatalog | grep \"X-Subject-Token\" | cut -d\" \" -f2) あとは、先ほど取得したトークンを “X-Auth-Token” にセットして、API を発行すれば OK。 curl -i -s -X PUT $&#123;nova_endpoint&#125;/$&#123;project_id&#125;/os-services/force-down \\-H \"Content-Type: application/json\" \\-H \"Accept: application/json \" \\-H \"X-OpenStack-Nova-API-Version: 2.11\" \\-H \"X-Auth-Token: $&#123;token&#125;\" \\-d '&#123;\"binary\": \"nova-compute\", \"host\": \"'$&#123;target&#125;'\", \"forced_down\": '$&#123;forcedown&#125;'&#125;' コード全文は以下の通りとなる。 function help() &#123; echo &quot;usage: $&#123;0##*/&#125; &lt;target&gt; &lt;action&gt;&quot; echo &quot;usage: $&#123;0##*/&#125; [--help]&quot; echo &quot;&quot; echo &quot;Positional arguments:&quot; echo &quot; &lt;target&gt; Computer name that you want to do force-down.&quot; echo &quot; &lt;action&gt; true(set force-down) or false(unset force-down)&quot; echo &quot;&quot; echo &quot;Optional arguments:&quot; echo &quot; --help Display help menu.&quot;&#125;while getopts &quot;:vh-:&quot; opt; do case &quot;$opt&quot; in -) case &quot;$&#123;OPTARG&#125;&quot; in help) help exit 0 ;; esac ;; esacdoneif [ $# -ne 2 ]; then help echo &quot;&quot; echo &quot;[ERROR] Set the correct number of arguments. (require: 2, input: $#)&quot; exit 1else target=$1 case &quot;$2&quot; in &quot;true&quot; | &quot;false&quot; ) forcedown=$2 ;; * ) help echo &quot;&quot; echo &quot;[ERROR] Please set &apos;true&apos; or &apos;false&apos; as 2nd arguments.&quot; exit 1 ;; esacfisource ~/overcloudrcproject_id=`openstack project list | grep &quot; $&#123;OS_PROJECT_NAME&#125; &quot; | cut -d&quot; &quot; -f2`nova_endpoint=`openstack endpoint list | grep &quot; compute &quot; | grep &quot; public &quot; | cut -d&quot;|&quot; -f8 | sed -e &quot;s/ //g&quot;`token=$(curl -i -s -X POST -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;auth&quot;: &#123;&quot;identity&quot;: &#123;&quot;methods&quot;: [&quot;&apos;$&#123;OS_AUTH_TYPE&#125;&apos;&quot;], &quot;password&quot;: &#123;&quot;user&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_USERNAME&#125;&apos;&quot;, &quot;password&quot;: &quot;&apos;$&#123;OS_PASSWORD&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;, &quot;scope&quot;: &#123;&quot;project&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_NAME&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;&#125;&apos; $&#123;OS_AUTH_URL&#125;/auth/tokens?nocatalog | grep &quot;X-Subject-Token&quot; | cut -d&quot; &quot; -f2)token=`echo $&#123;token&#125; | sed -e &quot;s/[\\r\\n]\\+//g&quot;`curl -i -s -X PUT $&#123;nova_endpoint&#125;/$&#123;project_id&#125;/os-services/force-down -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json &quot; -H &quot;X-OpenStack-Nova-API-Version: 2.11&quot; -H &quot;X-Auth-Token: $&#123;token&#125;&quot; -d &apos;&#123;&quot;binary&quot;: &quot;nova-compute&quot;, &quot;host&quot;: &quot;&apos;$&#123;target&#125;&apos;&quot;, &quot;forced_down&quot;: &apos;$&#123;forcedown&#125;&apos;&#125;&apos; &gt;/dev/nullif [ $? -eq 0 ]; then echo &quot;[INFO] force-down was finished successfully&quot;else echo &quot;[ERROR] force-down was failed.&quot;finova hypervisor-list 実行すると以下のように出力される。 $ ./api_nova_forcedown.sh --helpusage: api_nova_forcedown.sh &lt;target&gt; &lt;action&gt;usage: api_nova_forcedown.sh [--help]Positional arguments: &lt;target&gt; Computer name that you want to do force-down. &lt;action&gt; true(set force-down) or false(unset force-down)Optional arguments: --help Display help menu. $ sh ./api_nova_forcedown.sh jfc-cmp01.nttdata.co.jp true[INFO] force-down was finished successfully+--------------------------------------+-------------------------+-------+---------+| ID | Hypervisor hostname | State | Status |+--------------------------------------+-------------------------+-------+---------+| 1ff4b167-87c0-409b-87e9-298be57c6e11 | jfc-cmp02.nttdata.co.jp | up | enabled || d40ee745-18e6-43f6-b605-04ac6bb32972 | jfc-cmp01.nttdata.co.jp | down | enabled |+--------------------------------------+-------------------------+-------+---------+ $ sh ./api_nova_forcedown.sh jfc-cmp01.nttdata.co.jp false[INFO] force-down was finished successfully+--------------------------------------+-------------------------+-------+---------+| ID | Hypervisor hostname | State | Status |+--------------------------------------+-------------------------+-------+---------+| 1ff4b167-87c0-409b-87e9-298be57c6e11 | jfc-cmp02.nttdata.co.jp | up | enabled || d40ee745-18e6-43f6-b605-04ac6bb32972 | jfc-cmp01.nttdata.co.jp | up | enabled |+--------------------------------------+-------------------------+-------+---------+ Python SDK 使用curl を使用するケースと同様、こちらも keystone v2 と v3 で実装が若干異なってくるが、今回は v3 を前提に話を進める。 まずは OpenStack の環境変数を読み込む。 source ~/overcloudrc 次に認証情報をもとにセッションを確立する。v3_auth = v3.Password(auth_url=os_auth_url, username=os.environ['OS_USERNAME'], password=os.environ['OS_PASSWORD'], project_name=os.environ['OS_PROJECT_NAME'], project_domain_name=os.environ['OS_PROJECT_DOMAIN_NAME'], user_domain_name=os.environ['OS_USER_DOMAIN_NAME'])sess = session.Session(auth=v3_auth, verify=False) Nova API を使用する場合、最初に Nova Client のインスタンスを生成する。import novaclient.clientn_sess = novaclient.client.Client(2, session=sess) 任意の Nova API を実行し、結果を “result” に格納する。result = n_sess.servers.list() 最後に “result” の値を出力する。for r in result: print r.id, r.name; コード全文は以下の通り。import osimport loggingfrom keystoneauth1.identity import v3from keystoneauth1 import sessionimport requestsclass Sample: def __init__(self): requests.packages.urllib3.disable_warnings() logging.basicConfig(level=logging.INFO) self.logger = logging.getLogger(__name__) def authorization(self): if os.environ.get('http_proxy') or os.environ.get('https_proxy'): self.logger.WARN(\"Proxy env vars set\") os_auth_url = os.environ['OS_AUTH_URL'] os_auth_url = os_auth_url.replace('v2.0', 'v3') if not os_auth_url.endswith('v3'): os_auth_url += '/v3' v3_auth = v3.Password(auth_url=os_auth_url, username=os.environ['OS_USERNAME'], password=os.environ['OS_PASSWORD'], project_name=os.environ['OS_PROJECT_NAME'], project_domain_name=os.environ['OS_PROJECT_DOMAIN_NAME'], user_domain_name=os.environ['OS_USER_DOMAIN_NAME']) k_sess = session.Session(auth=v3_auth, verify=False) return k_sess def nova_sess(self): import novaclient.client sess = self.authorization() n_sess = novaclient.client.Client(2, session=sess) return n_sess def nova_list(self): n_sess = self.nova_sess() result = n_sess.servers.list() for r in result: print r.id, r.name; def neutron_sess(self): import neutronclient.neutron.client sess = self.authorization() q_sess = neutronclient.neutron.client.Client('2.0', session=sess) return q_sess def neutron_list(self): q_sess = self.neutron_sess() result = q_sess.list_networks()['networks'] for r in result: for k, v in r.items(): print(\"%s : %s\" % (k, v)) print('\\n')s = Sample()s.nova_list()s.neutron_list() 実行すると以下の通り出力される。03116438-bd19-4452-8339-cd992c50d156 jfc-cmp02988877da-17eb-4a07-a610-ccab64eac23a jfc-ctr0171d4cc92-9ab4-4678-bd53-b2c03ebe943e jfc-ctr0209ae722c-8e05-4a02-ad86-dbe7b2232775 jfc-cmp013a416f50-9ea2-48f5-9168-447cda1c4f15 jfc-ctr03provider:physical_network : ctlplaneipv6_address_scope : Nonerevision_number : 8port_security_enabled : Trueprovider:network_type : flatid : 515ab5ab-e73c-428b-b145-4f9b89fac431router:external : Falseavailability_zone_hints : []availability_zones : [u'nova']ipv4_address_scope : Noneshared : Falseproject_id : ebe0a369198a4b92b0f294ef22386756l2_adjacency : Truestatus : ACTIVEsubnets : [u'a2509cf3-fb5e-4714-8820-1b94283ccdf7']description :tags : []updated_at : 2018-07-27T10:47:42Zprovider:segmentation_id : Nonename : ctlplaneadmin_state_up : Truetenant_id : ebe0a369198a4b92b0f294ef22386756created_at : 2018-07-27T07:37:22Zmtu : 1500provider:physical_network : externalipv6_address_scope : Nonerevision_number : 3port_security_enabled : Trueprovider:network_type : flatid : 91c89b6a-2d44-4489-86f9-992c9017cfe0router:external : Falseavailability_zone_hints : []availability_zones : []ipv4_address_scope : Noneshared : Falseproject_id : ebe0a369198a4b92b0f294ef22386756l2_adjacency : Truestatus : ACTIVEsubnets : [u'f2bd3531-fb6a-49a4-b63d-d531f8575f2d']description :tags : []updated_at : 2018-07-30T12:34:27Zprovider:segmentation_id : Nonename : externaladmin_state_up : Falsetenant_id : ebe0a369198a4b92b0f294ef22386756created_at : 2018-07-30T12:34:26Zmtu : 1500...","raw":null,"content":null,"categories":[],"tags":[{"name":"OpenStack","slug":"OpenStack","permalink":"http://haystacker.net/tags/OpenStack/"}]}]}