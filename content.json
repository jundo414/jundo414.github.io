{"meta":{"title":"Haystacker","subtitle":null,"description":null,"author":"jundo414","url":"http://haystacker.net"},"pages":[{"title":"page","date":"2018-09-08T03:41:48.000Z","updated":"2018-09-08T03:52:31.200Z","comments":true,"path":"index.html","permalink":"http://haystacker.net/index.html","excerpt":"","text":"top page"}],"posts":[{"title":"OpenStack API 実装例","slug":"howto-use-openstack-api","date":"2018-09-08T03:05:27.000Z","updated":"2018-09-08T03:36:27.809Z","comments":true,"path":"2018/09/08/howto-use-openstack-api/","link":"","permalink":"http://haystacker.net/2018/09/08/howto-use-openstack-api/","excerpt":"","text":"curl 使用まずは OpenStack の環境変数を読み込む。 1source ~/overcloudrc 次にユーザ名とパスワード、ドメイン名を指定し、トークンを取得する。keystone で v2 を使用しているか v3 を使用しているかによって トークンの表示位置が変更するので注意が必要。今回は、keysotne v3 を前提にしている。 1token=$(curl -i -s -X POST -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;auth&quot;: &#123;&quot;identity&quot;: &#123;&quot;methods&quot;: [&quot;&apos;$&#123;OS_AUTH_TYPE&#125;&apos;&quot;], &quot;password&quot;: &#123;&quot;user&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_USERNAME&#125;&apos;&quot;, &quot;password&quot;: &quot;&apos;$&#123;OS_PASSWORD&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;, &quot;scope&quot;: &#123;&quot;project&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_NAME&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;&#125;&apos; $&#123;OS_AUTH_URL&#125;/auth/tokens?nocatalog | grep &quot;X-Subject-Token&quot; | cut -d&quot; &quot; -f2) あとは、先ほど取得したトークンを “X-Auth-Token” にセットして、API を発行すれば OK。 1curl -i -s -X PUT $&#123;nova_endpoint&#125;/$&#123;project_id&#125;/os-services/force-down -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json &quot; -H &quot;X-OpenStack-Nova-API-Version: 2.11&quot; -H &quot;X-Auth-Token: $&#123;token&#125;&quot; -d &apos;&#123;&quot;binary&quot;: &quot;nova-compute&quot;, &quot;host&quot;: &quot;&apos;$&#123;target&#125;&apos;&quot;, &quot;forced_down&quot;: &apos;$&#123;forcedown&#125;&apos;&#125;&apos; コード全文は以下の通りとなる。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162function help() &#123; echo &quot;usage: $&#123;0##*/&#125; &lt;target&gt; &lt;action&gt;&quot; echo &quot;usage: $&#123;0##*/&#125; [--help]&quot; echo &quot;&quot; echo &quot;Positional arguments:&quot; echo &quot; &lt;target&gt; Computer name that you want to do force-down.&quot; echo &quot; &lt;action&gt; true(set force-down) or false(unset force-down)&quot; echo &quot;&quot; echo &quot;Optional arguments:&quot; echo &quot; --help Display help menu.&quot;&#125;while getopts &quot;:vh-:&quot; opt; do case &quot;$opt&quot; in -) case &quot;$&#123;OPTARG&#125;&quot; in help) help exit 0 ;; esac ;; esacdoneif [ $# -ne 2 ]; then help echo &quot;&quot; echo &quot;[ERROR] Set the correct number of arguments. (require: 2, input: $#)&quot; exit 1else target=$1 case &quot;$2&quot; in &quot;true&quot; | &quot;false&quot; ) forcedown=$2 ;; * ) help echo &quot;&quot; echo &quot;[ERROR] Please set &apos;true&apos; or &apos;false&apos; as 2nd arguments.&quot; exit 1 ;; esacfisource ~/overcloudrcproject_id=`openstack project list | grep &quot; $&#123;OS_PROJECT_NAME&#125; &quot; | cut -d&quot; &quot; -f2`nova_endpoint=`openstack endpoint list | grep &quot; compute &quot; | grep &quot; public &quot; | cut -d&quot;|&quot; -f8 | sed -e &quot;s/ //g&quot;`token=$(curl -i -s -X POST -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;auth&quot;: &#123;&quot;identity&quot;: &#123;&quot;methods&quot;: [&quot;&apos;$&#123;OS_AUTH_TYPE&#125;&apos;&quot;], &quot;password&quot;: &#123;&quot;user&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_USERNAME&#125;&apos;&quot;, &quot;password&quot;: &quot;&apos;$&#123;OS_PASSWORD&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;, &quot;scope&quot;: &#123;&quot;project&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_NAME&#125;&apos;&quot;, &quot;domain&quot;: &#123;&quot;name&quot;: &quot;&apos;$&#123;OS_PROJECT_DOMAIN_NAME&#125;&apos;&quot;&#125;&#125;&#125;&#125;&#125;&apos; $&#123;OS_AUTH_URL&#125;/auth/tokens?nocatalog | grep &quot;X-Subject-Token&quot; | cut -d&quot; &quot; -f2)token=`echo $&#123;token&#125; | sed -e &quot;s/[\\r\\n]\\+//g&quot;`curl -i -s -X PUT $&#123;nova_endpoint&#125;/$&#123;project_id&#125;/os-services/force-down -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json &quot; -H &quot;X-OpenStack-Nova-API-Version: 2.11&quot; -H &quot;X-Auth-Token: $&#123;token&#125;&quot; -d &apos;&#123;&quot;binary&quot;: &quot;nova-compute&quot;, &quot;host&quot;: &quot;&apos;$&#123;target&#125;&apos;&quot;, &quot;forced_down&quot;: &apos;$&#123;forcedown&#125;&apos;&#125;&apos; &gt;/dev/nullif [ $? -eq 0 ]; then echo &quot;[INFO] force-down was finished successfully&quot;else echo &quot;[ERROR] force-down was failed.&quot;finova hypervisor-list 実行すると以下のように出力される。 12345678910$ ./api_nova_forcedown.sh --helpusage: api_nova_forcedown.sh &lt;target&gt; &lt;action&gt;usage: api_nova_forcedown.sh [--help]Positional arguments: &lt;target&gt; Computer name that you want to do force-down. &lt;action&gt; true(set force-down) or false(unset force-down)Optional arguments: --help Display help menu. 12345678$ sh ./api_nova_forcedown.sh jfc-cmp01.nttdata.co.jp true[INFO] force-down was finished successfully+--------------------------------------+-------------------------+-------+---------+| ID | Hypervisor hostname | State | Status |+--------------------------------------+-------------------------+-------+---------+| 1ff4b167-87c0-409b-87e9-298be57c6e11 | jfc-cmp02.nttdata.co.jp | up | enabled || d40ee745-18e6-43f6-b605-04ac6bb32972 | jfc-cmp01.nttdata.co.jp | down | enabled |+--------------------------------------+-------------------------+-------+---------+ 12345678$ sh ./api_nova_forcedown.sh jfc-cmp01.nttdata.co.jp false[INFO] force-down was finished successfully+--------------------------------------+-------------------------+-------+---------+| ID | Hypervisor hostname | State | Status |+--------------------------------------+-------------------------+-------+---------+| 1ff4b167-87c0-409b-87e9-298be57c6e11 | jfc-cmp02.nttdata.co.jp | up | enabled || d40ee745-18e6-43f6-b605-04ac6bb32972 | jfc-cmp01.nttdata.co.jp | up | enabled |+--------------------------------------+-------------------------+-------+---------+ Python SDK 使用curl を使用するケースと同様、こちらも keystone v2 と v3 で実装が若干異なってくるが、今回は v3 を前提に話を進める。 まずは OpenStack の環境変数を読み込む。 1source ~/overcloudrc 次に認証情報をもとにセッションを確立する。12345678v3_auth = v3.Password(auth_url=os_auth_url, username=os.environ[&apos;OS_USERNAME&apos;], password=os.environ[&apos;OS_PASSWORD&apos;], project_name=os.environ[&apos;OS_PROJECT_NAME&apos;], project_domain_name=os.environ[&apos;OS_PROJECT_DOMAIN_NAME&apos;], user_domain_name=os.environ[&apos;OS_USER_DOMAIN_NAME&apos;])sess = session.Session(auth=v3_auth, verify=False) Nova API を使用する場合、最初に Nova Client のインスタンスを生成する。12import novaclient.clientn_sess = novaclient.client.Client(2, session=sess) 任意の Nova API を実行し、結果を “result” に格納する。1result = n_sess.servers.list() 最後に “result” の値を出力する。12for r in result: print r.id, r.name; コード全文は以下の通り。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import osimport loggingfrom keystoneauth1.identity import v3from keystoneauth1 import sessionimport requestsclass Sample: def __init__(self): requests.packages.urllib3.disable_warnings() logging.basicConfig(level=logging.INFO) self.logger = logging.getLogger(__name__) def authorization(self): if os.environ.get(&apos;http_proxy&apos;) or os.environ.get(&apos;https_proxy&apos;): self.logger.WARN(&quot;Proxy env vars set&quot;) os_auth_url = os.environ[&apos;OS_AUTH_URL&apos;] os_auth_url = os_auth_url.replace(&apos;v2.0&apos;, &apos;v3&apos;) if not os_auth_url.endswith(&apos;v3&apos;): os_auth_url += &apos;/v3&apos; v3_auth = v3.Password(auth_url=os_auth_url, username=os.environ[&apos;OS_USERNAME&apos;], password=os.environ[&apos;OS_PASSWORD&apos;], project_name=os.environ[&apos;OS_PROJECT_NAME&apos;], project_domain_name=os.environ[&apos;OS_PROJECT_DOMAIN_NAME&apos;], user_domain_name=os.environ[&apos;OS_USER_DOMAIN_NAME&apos;]) k_sess = session.Session(auth=v3_auth, verify=False) return k_sess def nova_sess(self): import novaclient.client sess = self.authorization() n_sess = novaclient.client.Client(2, session=sess) return n_sess def nova_list(self): n_sess = self.nova_sess() result = n_sess.servers.list() for r in result: print r.id, r.name; def neutron_sess(self): import neutronclient.neutron.client sess = self.authorization() q_sess = neutronclient.neutron.client.Client(&apos;2.0&apos;, session=sess) return q_sess def neutron_list(self): q_sess = self.neutron_sess() result = q_sess.list_networks()[&apos;networks&apos;] for r in result: for k, v in r.items(): print(&quot;%s : %s&quot; % (k, v)) print(&apos;\\n&apos;)s = Sample()s.nova_list()s.neutron_list() 実行すると以下の通り出力される。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555603116438-bd19-4452-8339-cd992c50d156 jfc-cmp02988877da-17eb-4a07-a610-ccab64eac23a jfc-ctr0171d4cc92-9ab4-4678-bd53-b2c03ebe943e jfc-ctr0209ae722c-8e05-4a02-ad86-dbe7b2232775 jfc-cmp013a416f50-9ea2-48f5-9168-447cda1c4f15 jfc-ctr03provider:physical_network : ctlplaneipv6_address_scope : Nonerevision_number : 8port_security_enabled : Trueprovider:network_type : flatid : 515ab5ab-e73c-428b-b145-4f9b89fac431router:external : Falseavailability_zone_hints : []availability_zones : [u&apos;nova&apos;]ipv4_address_scope : Noneshared : Falseproject_id : ebe0a369198a4b92b0f294ef22386756l2_adjacency : Truestatus : ACTIVEsubnets : [u&apos;a2509cf3-fb5e-4714-8820-1b94283ccdf7&apos;]description :tags : []updated_at : 2018-07-27T10:47:42Zprovider:segmentation_id : Nonename : ctlplaneadmin_state_up : Truetenant_id : ebe0a369198a4b92b0f294ef22386756created_at : 2018-07-27T07:37:22Zmtu : 1500provider:physical_network : externalipv6_address_scope : Nonerevision_number : 3port_security_enabled : Trueprovider:network_type : flatid : 91c89b6a-2d44-4489-86f9-992c9017cfe0router:external : Falseavailability_zone_hints : []availability_zones : []ipv4_address_scope : Noneshared : Falseproject_id : ebe0a369198a4b92b0f294ef22386756l2_adjacency : Truestatus : ACTIVEsubnets : [u&apos;f2bd3531-fb6a-49a4-b63d-d531f8575f2d&apos;]description :tags : []updated_at : 2018-07-30T12:34:27Zprovider:segmentation_id : Nonename : externaladmin_state_up : Falsetenant_id : ebe0a369198a4b92b0f294ef22386756created_at : 2018-07-30T12:34:26Zmtu : 1500...","categories":[],"tags":[]}]}